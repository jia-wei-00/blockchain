{"version":3,"sources":["components/menu/ScrollToTop.js","redux/blockchain/blockchainReducer.js","redux/data/dataReducer.js","redux/store.js","redux/data/dataActions.js","redux/blockchain/blockchainActions.js","SharableState.js","assets/img/SA-logo.png","components/menu/header.js","assets/img/swap-bg.png","components/views/faucet.js","components/views/swap.js","assets/img/img/home/1.png","assets/img/img/home/2.png","assets/img/img/home/3.png","assets/img/img/home/4.png","assets/img/img/home/5.png","assets/img/img/home/name1.png","assets/img/img/home/name2.png","assets/img/img/home/name3.png","assets/img/img/home/name4.png","assets/img/img/home/name5.png","assets/img/img/home/card.jpg","components/views/inventory.js","components/views/shop.js","components/views/mysteryBox.js","assets/img/loading.png","assets/img/loading-shadow.png","assets/img/mystery-bg.png","assets/img/title/Mystery-box.png","assets/img/Box.png","assets/img/marketplace/Level-1.png","assets/img/marketplace/Level-2.png","assets/img/marketplace/Level-3.png","config.js","services/axios.service.js","assets/img/On-sales.png","assets/img/NFT-detail.png","assets/img/title/Gift-away.png","assets/img/title/Update-price.png","assets/img/title/Cancel-sales.png","components/views/nftDetail.js","services/marketplace.service.js","App.js","serviceWorker.js","i18n.js","index.js"],"names":["ScrollToTop","props","state","is_visible","scrollComponent","this","document","addEventListener","e","toggleVisibility","window","pageYOffset","setState","scrollTo","top","behavior","id","className","onClick","scrollToTop","Component","initialState","loading","account","JTOKEN","RANDOMNFT","MARKETPLACE","web3","errorMsg","blockchainReducer","action","type","payload","MarketPlace","getJTokenBalance","getPlayerNFT","getSellingNFT","error","dataReducer","rootReducer","combineReducers","blockchain","data","middleware","thunk","composeEnhancers","compose","applyMiddleware","store","createStore","fetchDataFailed","fetchData","dispatch","a","getState","methods","balanceOf","call","getAllTokensForUser","fetchSellingItems","console","log","connectSuccess","connectFailed","connect","ethereum","Web3","request","method","params","chainId","Number","toString","chainName","nativeCurrency","name","symbol","decimals","rpcUrls","blockExplorerUrls","accounts","networkId","networks","JTOKENNetworkData","RANDOMNFTNetworkData","MarketPlaceNetworkData","JToken","eth","Contract","abi","address","RandomNFT","marketPlace","on","updateAccount","newChain","useSharableState","JTOKENAddress","RANDOMNFTAddress","MarketPlaceAddress","setDefaultBreakpoints","xs","l","xl","Header","t","useTranslation","useDispatch","useSelector","React","useState","setOpenMenu","showmenu","btn_icon","useEffect","header","getElementById","totop","sticky","offsetTop","scrollCallBack","classList","add","remove","removeEventListener","to","Button","disabled","substring","length","preventDefault","GlobalStyles","createGlobalStyle","css","Swap","require","setLoading","open","style","cursor","src","process","alt","textAlign","Row","Col","md","href","target","amount","utils","toWei","String","tmp_hashedValue","hashedValue","sha3","encoding","JTokenFaucet","send","from","once","err","then","receipt","location","reload","fromWei","Inventory","loadAmount","setLoadAmount","inventory","setInventory","inventoryCount","setInventoryCount","slice","map","nft","index","rarity","nft5","nft4","nft3","nft2","nft1","nftid","padStart","bidLink","Shop","approved","setApproved","useBetween","openMenu","openMenu1","setOpenMenu1","buyNFT","mintNFT","approveNFTAddress","approve","i","items","allowance","Image","hovernft1","left","hovernft2","hovernft3","hovernft4","hovernft5","card","display","push","renderBtn","textTransform","padding","web3Modal","Web3Modal","network","cacheProvider","providerOptions","walletconnect","options","rpc","provider","config","dbURL","axios","defaults","baseURL","app","path","element","replace","Boolean","hostname","match","I18nLoader","children","initialized","setInitialized","i18n","isInitialized","use","Backend","initReactI18next","init","lng","backend","loadPath","fallbackLng","debug","ns","defaultNS","keySeparator","interpolation","escapeValue","formatSeparator","react","wait","ReactDOM","render","bgColor","spinnerColor","textColor","App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1be4883a.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nexport default class ScrollToTop extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      is_visible: false\n    };\n  }\n\n  componentDidMount() {\n    var scrollComponent = this;\n    document.addEventListener(\"scroll\", function(e) {\n      scrollComponent.toggleVisibility();\n    });\n  }\n\n  toggleVisibility() {\n    if (window.pageYOffset > 600) {\n      this.setState({\n        is_visible: true\n      });\n    } else { this.setState({\n        is_visible: false\n      });\n    }\n  }\n\n  scrollToTop() {\n    window.scrollTo({\n      top: 0,\n      behavior: \"smooth\"\n    });\n  }\n\n  render() {\n    const { is_visible } = this.state;\n    return (\n      <div id='scroll-to-top' className='init'>\n        {is_visible && (\n          <div onClick={() => this.scrollToTop()}>\n            <i className=\"\"></i>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n","const initialState = {\n  loading: false,\n  account: null,\n  JTOKEN: null,\n  RANDOMNFT: null,\n  MARKETPLACE: null,\n  web3: null,\n  errorMsg: \"\",\n};\n\nconst blockchainReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"CONNECTION_REQUEST\":\n      return {\n        ...initialState,\n        loading: true,\n      };\n    case \"CONNECTION_SUCCESS\":\n      return {\n        ...state,\n        loading: false,\n        account: action.payload.account,\n        JTOKEN: action.payload.JTOKEN,\n        RANDOMNFT: action.payload.RANDOMNFT,\n        MARKETPLACE: action.payload.MarketPlace,\n        web3: action.payload.web3,\n      };\n    case \"CONNECTION_FAILED\":\n      return {\n        ...initialState,\n        loading: false,\n        errorMsg: action.payload,\n      };\n    case \"UPDATE_ACCOUNT\":\n      return {\n        ...state,\n        account: action.payload.account,\n      };\n    case \"CHAIN_CHANGED\":\n      return {\n        ...initialState,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default blockchainReducer;\n","const initialState = {\n  loading: false,\n  getJTokenBalance: \"\",\n  getPlayerNFT: [],\n  getSellingNFT: [],\n  error: false,\n  errorMsg: \"\",\n};\n\nconst dataReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"CHECK_DATA_REQUEST\":\n      return {\n        ...initialState,\n        loading: true,\n      };\n    case \"CHECK_DATA_SUCCESS\":\n      return {\n        ...initialState,\n        loading: false,\n        getJTokenBalance: action.payload.getJTokenBalance,\n        getPlayerNFT: action.payload.getPlayerNFT,\n        getSellingNFT: action.payload.getSellingNFT,\n      };\n    case \"CHECK_DATA_FAILED\":\n      return {\n        ...initialState,\n        loading: false,\n        error: true,\n        errorMsg: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default dataReducer;\n","import { applyMiddleware, compose, createStore, combineReducers } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport blockchainReducer from \"./blockchain/blockchainReducer\";\nimport dataReducer from \"./data/dataReducer\";\n\nconst rootReducer = combineReducers({\n  blockchain: blockchainReducer,\n  data: dataReducer,\n});\n\nconst middleware = [thunk];\nconst composeEnhancers = compose(applyMiddleware(...middleware));\n\nconst configureStore = () => {\n  return createStore(rootReducer, composeEnhancers);\n};\n\nconst store = configureStore();\n\nexport default store;\n","// log\nimport store from \"../store\";\n\nconst fetchDataRequest = () => {\n  return {\n    type: \"CHECK_DATA_REQUEST\",\n  };\n};\n\nconst fetchDataSuccess = (payload) => {\n  return {\n    type: \"CHECK_DATA_SUCCESS\",\n    payload: payload,\n  };\n};\n\nconst fetchDataFailed = (payload) => {\n  return {\n    type: \"CHECK_DATA_FAILED\",\n    payload: payload,\n  };\n};\n\nexport const fetchData = (account) => {\n  return async (dispatch) => {\n    dispatch(fetchDataRequest());\n    try {\n      let getJTokenBalance = await store\n        .getState()\n        .blockchain.JTOKEN.methods.balanceOf(account)\n        .call();\n      let getPlayerNFT = await store\n        .getState()\n        .blockchain.RANDOMNFT.methods.getAllTokensForUser(account)\n        .call();\n      let getSellingNFT = await store\n        .getState()\n        .blockchain.MARKETPLACE.methods.fetchSellingItems(account)\n        .call();\n\n      await dispatch(\n        fetchDataSuccess({\n          getJTokenBalance,\n          getPlayerNFT,\n          getSellingNFT,\n        })\n      );\n    } catch (err) {\n      console.log(err);\n      await dispatch(fetchDataFailed(\"Could not load data from contract.\"));\n    }\n  };\n};\n","// constants\nimport Web3 from \"web3\";\nimport JTOKEN from \"../../contracts/JTOKEN.json\";\nimport RANDOMNFT from \"../../contracts/RANDOMNFT.json\";\nimport MARKETPLACE from \"../../contracts/MarketPlace.json\";\n\n// log\nimport { fetchData } from \"../data/dataActions\";\n\nconst connectRequest = () => {\n  return {\n    type: \"CONNECTION_REQUEST\",\n  };\n};\n\nconst connectSuccess = (payload) => {\n  return {\n    type: \"CONNECTION_SUCCESS\",\n    payload: payload,\n  };\n};\n\nconst connectFailed = (payload) => {\n  return {\n    type: \"CONNECTION_FAILED\",\n    payload: payload,\n  };\n};\n\nconst updateAccountRequest = (payload) => {\n  return {\n    type: \"UPDATE_ACCOUNT\",\n    payload: payload,\n  };\n};\n\nconst chainChanged = () => {\n  return {\n    type: \"CHAIN_CHANGED\",\n  };\n};\n\nexport const connect = () => {\n  return async (dispatch) => {\n    dispatch(connectRequest());\n    //CHECK WHETHER METAMASK INSTALLED\n    if (window.ethereum) {\n\n      let web3 = new Web3(window.ethereum);\n\n      try {\n        await window.ethereum.request({\n          method: \"wallet_addEthereumChain\",\n          params: [\n            {\n              chainId: `0x${Number(97).toString(16)}`,\n              chainName: \"Binance Smart Chain Testnet\",\n              nativeCurrency: {\n                name: \"Binance Chain Native Token\",\n                symbol: \"tBNB\",\n                decimals: 18,\n              },\n              rpcUrls: [\n                \"https://data-seed-prebsc-1-s1.binance.org:8545\",\n                \"https://data-seed-prebsc-2-s1.binance.org:8545\",\n                \"https://data-seed-prebsc-1-s2.binance.org:8545\",\n                \"https://data-seed-prebsc-2-s2.binance.org:8545\",\n                \"https://data-seed-prebsc-1-s3.binance.org:8545\",\n                \"https://data-seed-prebsc-2-s3.binance.org:8545\",\n              ],\n              blockExplorerUrls: [\"https://testnet.bscscan.com\"],\n            },\n          ],\n        });\n\n        //GET ACCOUNT THAT CONNECTED\n        const accounts = await window.ethereum.request({\n          method: \"eth_requestAccounts\",\n        });\n        const networkId = await window.ethereum.request({\n          method: \"net_version\",\n        });\n        const JTOKENNetworkData = await JTOKEN.networks[networkId];\n        const RANDOMNFTNetworkData = await RANDOMNFT.networks[networkId];\n        const MarketPlaceNetworkData = await MARKETPLACE.networks[networkId];\n        if (\n          JTOKENNetworkData ||\n          RANDOMNFTNetworkData ||\n          MarketPlaceNetworkData\n        ) {\n          const JToken = new web3.eth.Contract(\n            JTOKEN.abi,\n            JTOKENNetworkData.address\n          );\n          const RandomNFT = new web3.eth.Contract(\n            RANDOMNFT.abi,\n            RANDOMNFTNetworkData.address\n          );\n          const marketPlace = new web3.eth.Contract(\n            MARKETPLACE.abi,\n            MarketPlaceNetworkData.address\n          );\n\n          dispatch(\n            connectSuccess({\n              //CURRENT CONNECTED ACCOUNT\n              account: accounts[0],\n              JTOKEN: JToken,\n              RANDOMNFT: RandomNFT,\n              MarketPlace: marketPlace,\n              web3: web3,\n            })\n          );\n          // Add listeners start\n          window.ethereum.on(\"accountsChanged\", (accounts) => {\n            dispatch(updateAccount(accounts[0]));\n          });\n          window.ethereum.on(\"chainChanged\", async () => {\n            let newChain = await window.ethereum.request({\n              method: \"net_version\",\n            });\n            if (newChain !== \"97\") {\n              dispatch(chainChanged());\n            } else {\n              dispatch(\n                connectSuccess({\n                  //CURRENT CONNECTED ACCOUNT\n                  account: accounts[0],\n                  JTOKEN: JToken,\n                  RANDOMNFT: RandomNFT,\n                  MarketPlace: marketPlace,\n                  web3: web3,\n                })\n              );\n            }\n          });\n          // Add listeners end\n        } else {\n          dispatch(connectFailed(\"Change network to BSC.\"));\n        }\n      } catch (err) {\n        dispatch(connectFailed(\"Something went wrong.\"));\n      }\n    } else {\n      dispatch(connectFailed(\"Install Metamask.\"));\n    }\n  };\n};\n\nexport const updateAccount = (account) => {\n  return async (dispatch) => {\n    dispatch(updateAccountRequest({ account: account }));\n    dispatch(fetchData(account));\n  };\n};\n","const useSharableState = () => {\r\n  // CONTRACT ADDRESS\r\n  const JTOKENAddress = \"0xdE22615aa9E674074bB6630Fce1872e89166d42C\";\r\n  const RANDOMNFTAddress = \"0x8A398dD4E2FCB2008df0e5e1bb5723AcA6622d3F\";\r\n  const MarketPlaceAddress = \"0x2168F5500e83A13599d8989f12Ed24456510C877\";\r\n\r\n  return {\r\n    JTOKENAddress,\r\n    RANDOMNFTAddress,\r\n    MarketPlaceAddress\r\n  };\r\n};\r\n\r\nexport default useSharableState;\r\n","export default __webpack_public_path__ + \"static/media/SA-logo.93822d2b.png\";","import React, { useEffect, useState } from \"react\";\nimport Breakpoint, {\n  BreakpointProvider,\n  setDefaultBreakpoints,\n} from \"react-socks\";\nimport { NavLink } from \"react-router-dom\";\n// import useOnclickOutside from \"react-cool-onclickoutside\";\nimport { Button } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Web3Modal from \"web3modal\";\nimport { connect } from \"../../redux/blockchain/blockchainActions\";\nimport { useTranslation } from \"react-i18next\";\nimport logo from \"../../assets/img/SA-logo.png\";\nimport useSharableState from \"../../../src/SharableState.js\";\nimport { useBetween } from \"use-between\";\n\nsetDefaultBreakpoints([{ xs: 0 }, { l: 1199 }, { xl: 1200 }]);\n\nconst Header = () => {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const blockchain = useSelector((state) => state.blockchain);\n\n  const [openMenu, setOpenMenu] = React.useState(false);\n\n  const closeMenu = () => {\n    setOpenMenu(false);\n  };\n\n  const [showmenu, btn_icon] = useState(false);\n  useEffect(() => {\n    dispatch(connect());\n    // connectWeb3();\n    const header = document.getElementById(\"myHeader\");\n    const totop = document.getElementById(\"scroll-to-top\");\n    const sticky = header.offsetTop;\n    const scrollCallBack = window.addEventListener(\"scroll\", () => {\n      btn_icon(false);\n      if (window.pageYOffset > sticky) {\n        header.classList.add(\"sticky\");\n        totop.classList.add(\"show\");\n      } else {\n        header.classList.remove(\"sticky\");\n        totop.classList.remove(\"show\");\n      }\n      if (window.pageYOffset > sticky) {\n        closeMenu();\n      }\n    });\n    return () => {\n      window.removeEventListener(\"scroll\", scrollCallBack);\n    };\n  }, []);\n  return (\n    <header id=\"myHeader\" className=\"navbar white\">\n      <div className=\"container\">\n        <div className=\"row w-100-nav\">\n          <BreakpointProvider>\n            {/*SCREEN RESOLUTION <1200 */}\n            {/* <Breakpoint l down>\n              {showmenu && (\n                <div className=\"menu\">\n                  <div className=\"navbar-item\">\n                    <div ref={ref}>\n                      <div\n                        className=\"dropdown-custom dropdown-toggle btn\"\n                        onClick={handleBtnClick}\n                      >\n                        Home\n                      </div>\n                      {openMenu && (\n                        <div className=\"item-dropdown\">\n                          <div className=\"dropdown\" onClick={closeMenu}>\n                            <NavLink to=\"/\" onClick={() => btn_icon(!showmenu)}>\n                              Homepage\n                            </NavLink>\n                            <NavLink\n                              to=\"/home1\"\n                              onClick={() => btn_icon(!showmenu)}\n                            >\n                              Homepage 1\n                            </NavLink>\n                            <NavLink\n                              to=\"/home2\"\n                              onClick={() => btn_icon(!showmenu)}\n                            >\n                              Homepage 1\n                            </NavLink>\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                  <div className=\"navbar-item\">\n                    <div ref={ref1}>\n                      <div\n                        className=\"dropdown-custom dropdown-toggle btn\"\n                        onClick={handleBtnClick1}\n                      >\n                        Explore\n                      </div>\n                      {openMenu1 && (\n                        <div className=\"item-dropdown\">\n                          <div className=\"dropdown\" onClick={closeMenu1}>\n                            <NavLink\n                              to=\"/explore\"\n                              onClick={() => btn_icon(!showmenu)}\n                            >\n                              Explore\n                            </NavLink>\n                            <NavLink\n                              to=\"/explore2\"\n                              onClick={() => btn_icon(!showmenu)}\n                            >\n                              Explore 2\n                            </NavLink>\n                            <NavLink\n                              to=\"/rangking\"\n                              onClick={() => btn_icon(!showmenu)}\n                            >\n                              Rangking\n                            </NavLink>\n                            <NavLink\n                              to=\"/colection\"\n                              onClick={() => btn_icon(!showmenu)}\n                            >\n                              Collection\n                            </NavLink>\n                            <NavLink\n                              to=\"/ItemDetail\"\n                              onClick={() => btn_icon(!showmenu)}\n                            >\n                              Items Details\n                            </NavLink>\n                            <NavLink\n                              to=\"/Auction\"\n                              onClick={() => btn_icon(!showmenu)}\n                            >\n                              Live Auction\n                            </NavLink>\n                            <NavLink\n                              to=\"/helpcenter\"\n                              onClick={() => btn_icon(!showmenu)}\n                            >\n                              Help Center\n                            </NavLink>\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                  <div className=\"navbar-item\">\n                    <div ref={ref2}>\n                      <div\n                        className=\"dropdown-custom dropdown-toggle btn\"\n                        onClick={handleBtnClick2}\n                      >\n                        Pages\n                      </div>\n                      {openMenu2 && (\n                        <div className=\"item-dropdown\">\n                          <div className=\"dropdown\" onClick={closeMenu2}>\n                            <NavLink\n                              to=\"/Author\"\n                              onClick={() => btn_icon(!showmenu)}\n                            >\n                              My NFT\n                            </NavLink>\n                            <NavLink\n                              to=\"/wallet\"\n                              onClick={() => btn_icon(!showmenu)}\n                            >\n                              Wallet\n                            </NavLink>\n                            <NavLink\n                              to=\"/create\"\n                              onClick={() => btn_icon(!showmenu)}\n                            >\n                              Create\n                            </NavLink>\n                            <NavLink\n                              to=\"/news\"\n                              onClick={() => btn_icon(!showmenu)}\n                            >\n                              News\n                            </NavLink>\n                            <NavLink\n                              to=\"/works\"\n                              onClick={() => btn_icon(!showmenu)}\n                            >\n                              Gallery\n                            </NavLink>\n                            <NavLink\n                              to=\"/login\"\n                              onClick={() => btn_icon(!showmenu)}\n                            >\n                              login\n                            </NavLink>\n                            <NavLink\n                              to=\"/loginTwo\"\n                              onClick={() => btn_icon(!showmenu)}\n                            >\n                              login 2\n                            </NavLink>\n                            <NavLink\n                              to=\"/register\"\n                              onClick={() => btn_icon(!showmenu)}\n                            >\n                              Register\n                            </NavLink>\n                            <NavLink\n                              to=\"/contact\"\n                              onClick={() => btn_icon(!showmenu)}\n                            >\n                              Contact Us\n                            </NavLink>\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                  <div className=\"navbar-item\">\n                    <NavLink to=\"/activity\" onClick={() => btn_icon(!showmenu)}>\n                      Activity\n                    </NavLink>\n                  </div>\n                  <div className=\"navbar-item\">\n                    <div ref={ref3}>\n                      <div\n                        className=\"dropdown-custom dropdown-toggle btn\"\n                        onClick={handleBtnClick3}\n                      >\n                        Element\n                      </div>\n                      {openMenu3 && (\n                        <div className=\"item-dropdown\">\n                          <div className=\"dropdown\" onClick={closeMenu3}>\n                            <NavLink\n                              to=\"/elegantIcons\"\n                              onClick={() => btn_icon(!showmenu)}\n                            >\n                              Elegant Icon\n                            </NavLink>\n                            <NavLink\n                              to=\"/etlineIcons\"\n                              onClick={() => btn_icon(!showmenu)}\n                            >\n                              Etline Icon\n                            </NavLink>\n                            <NavLink\n                              to=\"/fontAwesomeIcons\"\n                              onClick={() => btn_icon(!showmenu)}\n                            >\n                              Font Awesome Icon\n                            </NavLink>\n                            <NavLink\n                              to=\"/accordion\"\n                              onClick={() => btn_icon(!showmenu)}\n                            >\n                              Accordion\n                            </NavLink>\n                            <NavLink\n                              to=\"/alerts\"\n                              onClick={() => btn_icon(!showmenu)}\n                            >\n                              Alerts\n                            </NavLink>\n                            <NavLink\n                              to=\"/price\"\n                              onClick={() => btn_icon(!showmenu)}\n                            >\n                              Pricing Table\n                            </NavLink>\n                            <NavLink\n                              to=\"/progressbar\"\n                              onClick={() => btn_icon(!showmenu)}\n                            >\n                              Progress bar\n                            </NavLink>\n                            <NavLink\n                              to=\"/tabs\"\n                              onClick={() => btn_icon(!showmenu)}\n                            >\n                              Tabs\n                            </NavLink>\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              )}\n            </Breakpoint> */}\n\n            {/*SCREEN RESOLUTION >1200 */}\n            <Breakpoint xl>\n              <div className=\"menu\">\n                <div className=\"navbar-item\">\n                  <NavLink to=\"/blockchain/home\">\n                    {/* SPACE-ALPACA */}\n                    {t(\"home.label\")}\n                    <span className=\"lines\"></span>\n                  </NavLink>\n                </div>\n                <div className=\"navbar-item\">\n                  <NavLink to=\"/blockchain/shop\">\n                    {t(\"shop.label\")}\n                    <span className=\"lines\"></span>\n                  </NavLink>\n                </div>\n                <div className=\"navbar-item\">\n                  <NavLink to=\"/mysteryBox\">\n                    {t(\"mysteryBox.label\")}\n                    <span className=\"lines\"></span>\n                  </NavLink>\n                </div>\n                <div className=\"navbar-item\">\n                  <NavLink to=\"/marketplace\">\n                    {t(\"marketplace.label\")}\n                    <span className=\"lines\"></span>\n                  </NavLink>\n                </div>\n                <div className=\"navbar-item\">\n                  <NavLink to=\"/nft\">\n                    {t(\"myNFT.label\")}\n                    <span className=\"lines\"></span>\n                  </NavLink>\n                </div>\n\n                {/* HOME */}\n                {/* <div className=\"navbar-item\">\n                  <div ref={ref}>\n                    <div\n                      className=\"dropdown-custom dropdown-toggle btn\"\n                      onMouseEnter={handleBtnClick}\n                      onMouseLeave={closeMenu}\n                    >\n                      Home\n                      <span className=\"lines\"></span>\n                      {openMenu && (\n                        <div className=\"item-dropdown\">\n                          <div className=\"dropdown\" onClick={closeMenu}>\n                            <NavLink to=\"/\">Homepage</NavLink>\n                            <NavLink to=\"/home1\">Homepage 1</NavLink>\n                            <NavLink to=\"/home2\">Homepage 2</NavLink>\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </div> */}\n                {/* EXPLORE */}\n                {/* <div className=\"navbar-item\">\n                  <div ref={ref1}>\n                    <div\n                      className=\"dropdown-custom dropdown-toggle btn\"\n                      onMouseEnter={handleBtnClick1}\n                      onMouseLeave={closeMenu1}\n                    >\n                      Explore\n                      <span className=\"lines\"></span>\n                      {openMenu1 && (\n                        <div className=\"item-dropdown\">\n                          <div className=\"dropdown\" onClick={closeMenu1}>\n                            <NavLink to=\"/explore\">Explore</NavLink>\n                            <NavLink to=\"/marketplace\">Explore 2</NavLink>\n                            <NavLink to=\"/rangking\">Rangking</NavLink>\n                            <NavLink to=\"/colection\">Collection</NavLink>\n                            <NavLink to=\"/ItemDetail\">Items Details</NavLink>\n                            <NavLink to=\"/Auction\">Live Auction</NavLink>\n                            <NavLink to=\"/helpcenter\">Help Center</NavLink>\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </div> */}\n                {/* PAGES */}\n                {/* <div className=\"navbar-item\">\n                  <div ref={ref2}>\n                    <div\n                      className=\"dropdown-custom dropdown-toggle btn\"\n                      onMouseEnter={handleBtnClick2}\n                      onMouseLeave={closeMenu2}\n                    >\n                      Pages\n                      <span className=\"lines\"></span>\n                      {openMenu2 && (\n                        <div className=\"item-dropdown\">\n                          <div className=\"dropdown\" onClick={closeMenu2}>\n                            <NavLink to=\"/Author\">Author</NavLink>\n                            <NavLink to=\"/wallet\">Wallet</NavLink>\n                            <NavLink to=\"/create\">Create</NavLink>\n                            <NavLink to=\"/news\">News</NavLink>\n                            <NavLink to=\"/works\">Gallery</NavLink>\n                            <NavLink to=\"/login\">login</NavLink>\n                            <NavLink to=\"/loginTwo\">login 2</NavLink>\n                            <NavLink to=\"/register\">Register</NavLink>\n                            <NavLink to=\"/contact\">Contact Us</NavLink>\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </div> */}\n                {/* ACTIVITY */}\n                {/* <div className=\"navbar-item\">\n                  <NavLink to=\"/activity\">\n                    Activity\n                    <span className=\"lines\"></span>\n                  </NavLink>\n                </div> */}\n                {/* PAGES */}\n                {/* <div className=\"navbar-item\">\n                  <div ref={ref3}>\n                    <div\n                      className=\"dropdown-custom dropdown-toggle btn\"\n                      onMouseEnter={handleBtnClick3}\n                      onMouseLeave={closeMenu3}\n                    >\n                      Pages\n                      <span className=\"lines\"></span>\n                      {openMenu3 && (\n                        <div className=\"item-dropdown\">\n                          <div className=\"dropdown\" onClick={closeMenu3}>\n                            <NavLink to=\"/elegantIcons\">Elegant Icon</NavLink>\n                            <NavLink to=\"/etlineIcons\">Etline Icon</NavLink>\n                            <NavLink to=\"/fontAwesomeIcons\">\n                              Font Awesome Icon\n                            </NavLink>\n                            <NavLink to=\"/accordion\">Accordion</NavLink>\n                            <NavLink to=\"/alerts\">Alerts</NavLink>\n                            <NavLink to=\"/price\">Pricing Table</NavLink>\n                            <NavLink to=\"/progressbar\">Progess Bar</NavLink>\n                            <NavLink to=\"/tabs\">Tabs</NavLink>\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </div> */}\n              </div>\n            </Breakpoint>\n          </BreakpointProvider>\n\n          <div className=\"mainside\">\n            {blockchain.account ? (\n              <Button className=\"btn-main btn-connect\" disabled>\n                {blockchain.account.substring(0, 2) +\n                  \"...\" +\n                  blockchain.account.substring(blockchain.account.length - 4)}\n              </Button>\n            ) : (\n              <Button\n                className=\"btn-main btn-connect\"\n                onClick={(e) => {\n                  e.preventDefault();\n                  dispatch(connect());\n                }}\n              >\n                {t(\"connectWallet.label\")}\n              </Button>\n            )}\n          </div>\n        </div>\n\n        <button className=\"nav-icon\" onClick={() => btn_icon(!showmenu)}>\n          <div className=\"menu-line white\"></div>\n          <div className=\"menu-line1 white\"></div>\n          <div className=\"menu-line2 white\"></div>\n        </button>\n      </div>\n    </header>\n  );\n};\nexport default Header;\n","export default __webpack_public_path__ + \"static/media/swap-bg.d1a8452e.png\";","import swapBackground from \"../../assets/img/swap-bg.png\";\r\nimport { Image, Row, Col, Form, Button } from \"react-bootstrap\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { createGlobalStyle } from \"styled-components\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useBetween } from \"use-between\";\r\nimport useSharableState from \"../../../src/SharableState.js\";\r\nimport { css } from \"@emotion/react\";\r\nimport ClipLoader from \"react-spinners/ClipLoader\";\r\nimport { fetchData } from \"../../redux/data/dataActions\";\r\n\r\nconst GlobalStyles = createGlobalStyle`\r\n  header#myHeader .logo .d-block{\r\n    display: none !important;\r\n  }\r\n  header#myHeader .logo .d-none{\r\n    display: block !important;\r\n  }\r\n  .navbar .mainside a{\r\n    background: #8364e2;\r\n    &:hover{\r\n      box-shadow: 2px 2px 20px 0px #8364e2;\r\n    }\r\n  }\r\n  .item-dropdown{\r\n    .dropdown{\r\n      a{\r\n        &:hover{\r\n          background: #8364e2;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  .btn-main{\r\n    background: #8364e2;\r\n    &:hover{\r\n      box-shadow: 2px 2px 20px 0px #8364e2;\r\n    }\r\n  }\r\n  p.lead{\r\n    color: #a2a2a2;\r\n  }\r\n  .navbar .navbar-item .lines{\r\n    border-bottom: 2px solid #8364e2;\r\n  }\r\n  .jumbotron.no-bg{\r\n    height: 100vh;\r\n    overflow: hidden;\r\n    background-repeat: repeat;\r\n    background-size: cover;\r\n    background-position: bottom;\r\n    background-repeat: no-repeat;\r\n  }\r\n  #tsparticles{\r\n    top: 0;\r\n  }\r\n  .text-uppercase.color{\r\n    color: #8364e2;\r\n  }\r\n  .de_count h3 {\r\n    font-size: 36px;\r\n    margin-bottom: 0px;\r\n  }\r\n  .de_count h5{\r\n    font-size: 14px;\r\n    font-weight: 500;\r\n  }\r\n  h2 {\r\n    font-size: 30px;\r\n  }\r\n  .box-url{\r\n    text-align: center;\r\n    h4{\r\n      font-size: 16px;\r\n    }\r\n  }\r\n  .de_countdown{\r\n    border: solid 2px #8364e2;\r\n  }\r\n  .author_list_pp, .author_list_pp i, \r\n  .nft_coll_pp i, .feature-box.style-3 i, \r\n  footer.footer-light #form_subscribe #btn-subscribe i, \r\n  #scroll-to-top div{\r\n    background: #8364e2;\r\n  }\r\n  footer.footer-light .subfooter .social-icons span i{\r\n    background: #403f83;\r\n  }\r\n  .author_list_pp:hover img{\r\n    box-shadow: 0px 0px 0px 2px #8364e2;\r\n  }\r\n  .nft__item_action span{\r\n    color: #8364e2;\r\n  }\r\n  .feature-box.style-3 i.wm{\r\n    color: rgba(131,100,226, .1);\r\n  }\r\n  @media only screen and (max-width: 1199px) {\r\n    .navbar{\r\n      \r\n    }\r\n    .navbar .menu-line, .navbar .menu-line1, .navbar .menu-line2{\r\n      background: #fff;\r\n    }\r\n    .item-dropdown .dropdown a{\r\n      color: #fff !important;\r\n    }\r\n  }\r\n`;\r\n\r\nconst Swap = () => {\r\n  var Web3 = require(\"web3\");\r\n  const dispatch = useDispatch();\r\n  const blockchain = useSelector((state) => state.blockchain);\r\n  const data = useSelector((state) => state.data);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const FaucetBtn = () => {\r\n    setLoading(true);\r\n    let amount = Web3.utils.toWei(String(\"100\"), \"ether\");\r\n    let tmp_hashedValue = amount + 1111;\r\n    let hashedValue = Web3.utils.sha3(tmp_hashedValue, { encoding: \"hex\" });\r\n    console.log(hashedValue);\r\n    blockchain.JTOKEN.methods\r\n      .JTokenFaucet(amount, hashedValue)\r\n      .send({ from: blockchain.account })\r\n      .once(\"error\", (err) => {\r\n        console.log(err);\r\n        setLoading(false);\r\n      })\r\n      .then((receipt) => {\r\n        setLoading(false);\r\n        window.location.reload();\r\n      });\r\n  };\r\n\r\n  \r\n\r\n  useEffect(() => {\r\n    if (blockchain.account !== null) {\r\n      dispatch(fetchData(blockchain.account));\r\n    }\r\n  }, [blockchain.JTOKEN]); // eslint-disable-line\r\n\r\n  \r\n\r\n  return (\r\n    <div>\r\n      <GlobalStyles />\r\n      <section className=\"no-bottom\">\r\n        <div className=\"row justify-content-center\">\r\n          <div\r\n            className=\"col-md-5 col-xl-4 col-10 mb30\"\r\n            onClick={() => window.open(\"https://metamask.io/\", \"_blank\")}\r\n            style={{ cursor: \"pointer\" }}\r\n          >\r\n            <span className=\"box-url mt-5\">\r\n              <img src={process.env.PUBLIC_URL + \"/img/wallet/1.png\"} alt=\"\" className=\"mb20\" />\r\n              <h4>Metamask</h4>\r\n              <p>Please use Metamask to play the game</p>\r\n            </span>\r\n          </div>\r\n        </div>\r\n        <div className=\"row justify-content-center\">\r\n          <div className=\"col-xl-8 col-12\">\r\n            <h3 className=\"mt-3\" style={{ textAlign: \"center\" }}>\r\n              This game is build for my hobby purpose\r\n            </h3>\r\n            <Row className=\"justify-content-center\">\r\n              <Col md={6} xl={5}>\r\n                <ul className=\"mb-5\">\r\n                  <li>\r\n                    <p>\r\n                      All smart contract deploy in Binance Smart Chain Testnet.\r\n                    </p>\r\n                  </li>\r\n                  <li>\r\n                    <p>\r\n                      You need to connect Metamask to Binance Smart Chain\r\n                      Testnet{\" \"}\r\n                      <a\r\n                        href=\"https://medium.com/spartanprotocol/how-to-connect-metamask-to-bsc-testnet-7d89c111ab2\"\r\n                        target=\"_blank\"\r\n                        className=\"mx-1\"\r\n                      >\r\n                        Tutorial Here\r\n                      </a>\r\n                      .\r\n                    </p>\r\n                  </li>\r\n                  <li>\r\n                    <p>This game only support Metamask as wallet.</p>\r\n                  </li>\r\n                  <li>\r\n                    <p>This game can buy NFT by using JTOKEN in this game.</p>\r\n                  </li>\r\n                  <li>\r\n                    <p>NFT in this game is random with rarity.</p>\r\n                  </li>\r\n                  <li>\r\n                    <p>NFT can be sell in marketplace.</p>\r\n                  </li>\r\n                </ul>\r\n              </Col>\r\n            </Row>\r\n            <h3 style={{ textAlign: \"center\" }}>To get JTOKEN in this game </h3>\r\n            <Row className=\"justify-content-center\">\r\n              <Col md={6} xl={5}>\r\n                <ul className=\"mb-5\">\r\n                  <li>\r\n                    <p>\r\n                      Get BNB in Binance Smart Chain Faucet {\"  \"}\r\n                      <a\r\n                        href=\"https://testnet.binance.org/faucet-smart\"\r\n                        target=\"_blank\"\r\n                        className=\"mx-1\"\r\n                      >\r\n                        Link Here\r\n                      </a>\r\n                    </p>\r\n                  </li>\r\n                  <li>\r\n                    <p>\r\n                      Then get 100 JTOKEN at{\" \"}\r\n                      <button\r\n                        className=\"faucet_btn mx-1\"\r\n                        onClick={FaucetBtn}\r\n                        disabled={loading}\r\n                      >\r\n                        Here\r\n                      </button>\r\n                    </p>\r\n                  </li>\r\n                  <li>\r\n                    <p>\r\n                      Now you have{\" \"}\r\n                      {Web3.utils.fromWei(data.getJTokenBalance, \"ether\")}{\" \"}\r\n                      JTOKEN\r\n                    </p>\r\n                  </li>\r\n                </ul>\r\n              </Col>\r\n            </Row>\r\n          </div>\r\n        </div>\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\nexport default Swap;\r\n","import swapBackground from \"../../assets/img/swap-bg.png\";\r\nimport { Image, Row, Col, Form, Button } from \"react-bootstrap\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { createGlobalStyle } from \"styled-components\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useBetween } from \"use-between\";\r\nimport useSharableState from \"../../../src/SharableState.js\";\r\nimport { css } from \"@emotion/react\";\r\nimport ClipLoader from \"react-spinners/ClipLoader\";\r\nimport { fetchData } from \"../../redux/data/dataActions\";\r\n\r\nconst GlobalStyles = createGlobalStyle`\r\n  header#myHeader.navbar.sticky.white {\r\n    background: #212428;\r\n    border-bottom: 0;\r\n    box-shadow: 0 4px 20px 0 rgba(10,10,10, .8);\r\n  }\r\n  header#myHeader.navbar .search #quick_search{\r\n    color: #fff;\r\n    background: rgba(255, 255, 255, .1);\r\n  }\r\n  header#myHeader.navbar.white .btn, .navbar.white a, .navbar.sticky.white a{\r\n    color: #fff;\r\n  }\r\n  header#myHeader .dropdown-toggle::after{\r\n    color: #fff;\r\n  }\r\n  header#myHeader .logo .d-block{\r\n    display: none !important;\r\n  }\r\n  header#myHeader .logo .d-none{\r\n    display: none !important;\r\n  }\r\n  header#myHeader .logo .d-3{\r\n    display: block !important;\r\n  }\r\n  footer.footer-light .subfooter span img.d-1{\r\n    display: none !important;\r\n  }\r\n  footer.footer-light .subfooter span img.d-3{\r\n    display: inline-block !important;\r\n  }\r\n  .de_countdown{\r\n    right: 10px;\r\n    color: #fff;\r\n  }\r\n  .author_list_pp{\r\n    margin-left:0;\r\n  }\r\n  footer.footer-light .subfooter{\r\n    border-top: 1px solid rgba(255,255,255,.1);\r\n  }\r\n`;\r\n\r\n// LOADER\r\nconst override = css`\r\n  border-bottom-color: transparent !important;\r\n  border-color: #ffffff;\r\n  top: 2px;\r\n`;\r\n\r\nconst tokenOption = [\r\n  { label: \"BNB\", value: \"1\" },\r\n  { label: \"JTOKEN\", value: \"2\" },\r\n];\r\n\r\nconst Swap = () => {\r\n  const dispatch = useDispatch();\r\n  const blockchain = useSelector((state) => state.blockchain);\r\n  const data = useSelector((state) => state.data);\r\n  const [coinRate, setCoinRate] = useState(\"\");\r\n  const [token, setToken] = useState(\"\");\r\n  const [coinOneVal, setCoinOneVal] = useState(\"\");\r\n  const [coinTwoVal, setCoinTwoVal] = useState(\"\");\r\n  const [toToken, setToToken] = useState(\"\");\r\n  const { JTOKENAddress } = useBetween(useSharableState);\r\n  const [loading, setLoading] = useState(false);\r\n  const [approved, setApproved] = useState(\"\");\r\n  const [renderBtn, setRenderBtn] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (blockchain.account !== null) {\r\n      dispatch(fetchData(blockchain.account));\r\n      checkJTOKEN();\r\n\r\n    }\r\n  }, [blockchain.JTOKEN]); // eslint-disable-line\r\n\r\n  //CHECK SPAL APPROVE\r\n  const checkJTOKEN = () => {\r\n    blockchain.JTOKEN.methods\r\n      .allowance(blockchain.account, JTOKENAddress)\r\n      .call({ from: blockchain.account })\r\n      .then((receipt) => {\r\n        setApproved(receipt);\r\n      });\r\n  };\r\n\r\n  const checkRenderBtn = () => {\r\n    if (approved !== \"0\") {\r\n      setRenderBtn(true);\r\n    }\r\n  };\r\n\r\n  var Web3 = require(\"web3\");\r\n\r\n  const swapBtn = () => {\r\n    if (toToken == \"JTOKEN\") {\r\n      let coinOne = Web3.utils.toWei(String(coinOneVal), \"ether\");\r\n      let coinTwo = Web3.utils.toWei(String(coinTwoVal), \"ether\");\r\n      let tmp_hashedValue = coinOne + coinTwo + 1111;\r\n      let hashedValue = Web3.utils.sha3(tmp_hashedValue, { encoding: \"hex\" });\r\n      console.log(hashedValue);\r\n      blockchain.JTOKEN.methods\r\n        .buyToken(coinOne, coinTwo, hashedValue)\r\n        .send({ from: blockchain.account })\r\n        .once(\"error\", (err) => {\r\n          console.log(err);\r\n        });\r\n    } else if (toToken == \"BNB\") {\r\n      let coinTwo = Web3.utils.toWei(String(coinTwoVal), \"ether\");\r\n      let tmp_hashedValue = coinTwo + 1111;\r\n      let hashedValue = Web3.utils.sha3(tmp_hashedValue, { encoding: \"hex\" });\r\n      console.log(hashedValue);\r\n      blockchain.JTOKEN.methods\r\n        .sendEtherToUser(blockchain.account ,coinTwo, hashedValue)\r\n        .send({ from: blockchain.account })\r\n        .once(\"error\", (err) => {\r\n          console.log(err);\r\n        });\r\n    }\r\n  };\r\n\r\n  const approveBtn = () => {\r\n    document.getElementById(\"loadingbtn\").style.display = \"block\";\r\n    document.getElementById(\"approvebtn\").style.display = \"none\";\r\n    setLoading(true);\r\n    blockchain.JTOKEN.methods\r\n      .approve(JTOKENAddress, Web3.utils.toWei(\"99999999999\", \"ether\"))\r\n      .send({ from: blockchain.account })\r\n      .once(\"error\", (err) => {\r\n        console.log(err);\r\n        setLoading(false);\r\n        document.getElementById(\"loadingbtn\").style.display = \"none\";\r\n        document.getElementById(\"approvebtn\").style.display = \"block\";\r\n      })\r\n      .then((receipt) => {\r\n        setLoading(false);\r\n        document.getElementById(\"loadingbtn\").style.display = \"none\";\r\n        document.getElementById(\"swapbtn\").style.display = \"block\";\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <GlobalStyles />\r\n      <section className=\"jumbotron no-bg bg-image background\">\r\n        <div className=\"text-center div-center w-100\">\r\n          <h2 className=\"style-2\">Swap</h2>\r\n          <Row className=\"justify-content-center\">\r\n            <Col md={5}>\r\n              <Card>\r\n                <Card.Header>\r\n                  <h3 className=\"mb-2\">Exchange</h3>\r\n                  Trade tokens in an instant\r\n                </Card.Header>\r\n\r\n                <Card.Body>\r\n                  <Card className=\"mb-3\">\r\n                    <Card.Body>\r\n                      {/* {renderFrom()} */}\r\n                      <Form.Group>\r\n                        <Row>\r\n                          <Col>\r\n                            <Form.Label style={{ float: \"left\" }}>\r\n                              From\r\n                            </Form.Label>\r\n                            <Form.Label style={{ float: \"right\" }}>\r\n                              Rate : {token ? coinRate : \"-\"}\r\n                            </Form.Label>\r\n                          </Col>\r\n                        </Row>\r\n                        <Row className=\"pt-2\">\r\n                          <Col>\r\n                            <Form.Control\r\n                              className=\"input-control m-0 p-0\"\r\n                              type=\"number\"\r\n                              placeholder=\"0.0\"\r\n                              value={coinOneVal}\r\n                              onChange={(e) => {\r\n                                setCoinOneVal(e.target.value);\r\n                                if (toToken == \"JTOKEN\") {\r\n                                  setCoinTwoVal(e.target.value * 100);\r\n                                } else if (toToken == \"BNB\") {\r\n                                  setCoinTwoVal(e.target.value / 100);\r\n                                }\r\n                              }}\r\n                            ></Form.Control>\r\n                          </Col>\r\n                          <Col md=\"auto\">\r\n                            <Row>\r\n                              <Col>\r\n                                <Form.Control\r\n                                  as=\"select\"\r\n                                  className=\"m-0 p-0\"\r\n                                  style={{ textAlign: \"right\" }}\r\n                                  onChange={(e) => {\r\n                                    setToken(parseInt(e.target.value, 10));\r\n                                    //API pass value to get balance\r\n                                    if (e.target.value === \"1\") {\r\n                                      setCoinRate(100);\r\n                                      setToToken(\"JTOKEN\");\r\n                                      setCoinTwoVal(coinOneVal * 100);\r\n                                    } else if (e.target.value === \"2\") {\r\n                                      setCoinRate(0.01);\r\n                                      setToToken(\"BNB\");\r\n                                      setCoinTwoVal(coinOneVal / 100);\r\n                                    }\r\n                                  }}\r\n                                >\r\n                                  <option disabled selected hidden>\r\n                                    Select an currency\r\n                                  </option>\r\n                                  {tokenOption.map((option, optionIndex) => {\r\n                                    return (\r\n                                      <option\r\n                                        value={option.value}\r\n                                        key={`option_state_${optionIndex}`}\r\n                                        style={{ color: \"black\" }}\r\n                                      >\r\n                                        {option.label}\r\n                                      </option>\r\n                                    );\r\n                                  })}\r\n                                </Form.Control>\r\n                              </Col>\r\n                            </Row>\r\n                          </Col>\r\n                        </Row>\r\n                      </Form.Group>\r\n                    </Card.Body>\r\n                  </Card>\r\n                  <div className=\"demo-icon-wrap-s2 text-center mb-3\">\r\n                    <span aria-hidden=\"true\" className=\"arrow_down\"></span>\r\n                  </div>\r\n                  <Card className=\"mb-4\">\r\n                    <Card.Body>\r\n                      {/* {renderTo()} */}\r\n                      <Form.Group>\r\n                        <Row>\r\n                          <Col>\r\n                            <Form.Label style={{ float: \"left\" }}>\r\n                              To\r\n                            </Form.Label>\r\n                            <Form.Label style={{ float: \"right\" }}>\r\n                              Rate : {coinRate}\r\n                            </Form.Label>\r\n                          </Col>\r\n                        </Row>\r\n                        <Row className=\"pt-2\">\r\n                          <Col>\r\n                            <Form.Control\r\n                              className=\"input-control m-0 p-0 \"\r\n                              type=\"number\"\r\n                              placeholder=\"0.0\"\r\n                              value={coinTwoVal}\r\n                              onChange={(e) => {\r\n                                setCoinTwoVal(e.target.value);\r\n                              }}\r\n                              disabled\r\n                            />\r\n                          </Col>\r\n                          <Col md=\"auto\">\r\n                            <Row>\r\n                              <Col>{toToken}</Col>\r\n                            </Row>\r\n                          </Col>\r\n                        </Row>\r\n                      </Form.Group>\r\n                    </Card.Body>\r\n                  </Card>\r\n                  <Button\r\n                    id=\"loadingbtn\"\r\n                    className=\"btn btn-purple mt-2\"\r\n                    style={{ display: \"none\" }}\r\n                  >\r\n                    Loading\r\n                    <ClipLoader loading={loading} css={override} size={17} />\r\n                  </Button>\r\n                  {renderBtn ? (\r\n                    <Button\r\n                      className=\"btn btn-purple mt-2\"\r\n                      onClick={() => {\r\n                        swapBtn();\r\n                      }}\r\n                    >\r\n                      Swap\r\n                    </Button>\r\n                  ) : (\r\n                    <Button\r\n                      className=\"btn btn-purple mt-2\"\r\n                      onClick={() => {\r\n                        approveBtn();\r\n                      }}\r\n                    >\r\n                      Approve\r\n                    </Button>\r\n                  )}\r\n                </Card.Body>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\nexport default Swap;\r\n","export default __webpack_public_path__ + \"static/media/1.672eeea2.png\";","export default __webpack_public_path__ + \"static/media/2.00a54eab.png\";","export default __webpack_public_path__ + \"static/media/3.1c314a3d.png\";","export default __webpack_public_path__ + \"static/media/4.3109a04b.png\";","export default __webpack_public_path__ + \"static/media/5.36f24eea.png\";","export default __webpack_public_path__ + \"static/media/name1.16bf3cf2.png\";","export default __webpack_public_path__ + \"static/media/name2.5f1a87a7.png\";","export default __webpack_public_path__ + \"static/media/name3.3db080a1.png\";","export default __webpack_public_path__ + \"static/media/name4.9aa1ebd5.png\";","export default __webpack_public_path__ + \"static/media/name5.536843dc.png\";","export default __webpack_public_path__ + \"static/media/card.a990b4aa.jpg\";","import React, { useState, useEffect } from \"react\";\r\nimport nft1 from \"../../assets/img/img/home/1.png\";\r\nimport nft2 from \"../../assets/img/img/home/2.png\";\r\nimport nft3 from \"../../assets/img/img/home/3.png\";\r\nimport nft4 from \"../../assets/img/img/home/4.png\";\r\nimport nft5 from \"../../assets/img/img/home/5.png\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nconst Inventory = () => {\r\n  const data = useSelector((state) => state.data);\r\n  const [loadAmount, setLoadAmount] = useState(4);\r\n  const [inventory, setInventory] = useState([]);\r\n  const [inventoryCount, setInventoryCount] = useState(0);\r\n  const { t } = useTranslation();\r\n\r\n  const loadMore = () => {\r\n    setLoadAmount(loadAmount + 4);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setInventory(data.getPlayerNFT.slice(0, loadAmount));\r\n    setInventoryCount(data.getPlayerNFT.length);\r\n  }, [loadAmount, data.getPlayerNFT]);\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      {data.getPlayerNFT.length > 0 ? (\r\n        inventory.map((nft, index) => (\r\n          <div\r\n            key={index}\r\n            className=\"d-item col-lg-3 col-md-6 col-sm-6 col-xs-12 mb-4\"\r\n          >\r\n            <div className=\"nft__item m-0\">\r\n              <div className=\"nft__item_wrap\">\r\n                <span>\r\n                  <img\r\n                    src={\r\n                      nft.rarity === \"5\"\r\n                        ? nft5\r\n                        : nft.rarity === \"4\"\r\n                        ? nft4\r\n                        : nft.rarity === \"3\"\r\n                        ? nft3\r\n                        : nft.rarity === \"2\"\r\n                        ? nft2\r\n                        : nft.rarity === \"1\"\r\n                        ? nft1\r\n                        : null\r\n                    }\r\n                    className=\"nft__item_preview\"\r\n                    alt=\"\"\r\n                  />\r\n                </span>\r\n              </div>\r\n              <div className=\"text-center mb-2\">\r\n                <p className=\"m-0 text-small text-secondary\">\r\n                  {t(\"NFTId.label\")} : #{nft.nftid.toString().padStart(5, \"0\")}\r\n                </p>\r\n              </div>\r\n              <div className=\"nft__item_info\">\r\n                <h4>\r\n                  {nft.rarity === \"5\"\r\n                    ? \"R5 Name\"\r\n                    : nft.rarity === \"4\"\r\n                    ? \"R4 Name\"\r\n                    : nft.rarity === \"3\"\r\n                    ? \"R3 Name\"\r\n                    : nft.rarity === \"2\"\r\n                    ? \"R2 Name\"\r\n                    : nft.rarity === \"1\"\r\n                    ? \"R1 Name\"\r\n                    : null}\r\n                </h4>\r\n                <div className=\"nft__item_action mb-4\">\r\n                  <span onClick={() => window.open(nft.bidLink, \"_self\")}>\r\n                    {t(\"sell.label\")}\r\n                  </span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        ))\r\n      ) : (\r\n        <p className=\"text-center\">{t(\"noData.label\")}</p>\r\n      )}\r\n      {inventoryCount != inventory.length && (\r\n        <div className=\"col-lg-12\">\r\n          <div className=\"spacer-single\"></div>\r\n          <span onClick={() => loadMore()} className=\"btn-main lead m-auto\">\r\n            Load More\r\n          </span>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Inventory;\r\n","import { Image, Row, Col, Form, Button } from \"react-bootstrap\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { createGlobalStyle } from \"styled-components\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useBetween } from \"use-between\";\r\nimport useSharableState from \"../../../src/SharableState.js\";\r\nimport { css } from \"@emotion/react\";\r\nimport ClipLoader from \"react-spinners/ClipLoader\";\r\nimport { fetchData } from \"../../redux/data/dataActions\";\r\nimport Web3Modal from \"web3modal\";\r\nimport nft1 from \"../../assets/img/img/home/1.png\";\r\nimport nft2 from \"../../assets/img/img/home/2.png\";\r\nimport nft3 from \"../../assets/img/img/home/3.png\";\r\nimport nft4 from \"../../assets/img/img/home/4.png\";\r\nimport nft5 from \"../../assets/img/img/home/5.png\";\r\nimport hovernft1 from \"../../assets/img/img/home/name1.png\";\r\nimport hovernft2 from \"../../assets/img/img/home/name2.png\";\r\nimport hovernft3 from \"../../assets/img/img/home/name3.png\";\r\nimport hovernft4 from \"../../assets/img/img/home/name4.png\";\r\nimport hovernft5 from \"../../assets/img/img/home/name5.png\";\r\nimport card from \"../../assets/img/img/home/card.jpg\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport Inventory from \"./inventory\";\r\n\r\nconst GlobalStyles = createGlobalStyle`\r\n  header#myHeader .logo .d-block{\r\n    display: none !important;\r\n  }\r\n  header#myHeader .logo .d-none{\r\n    display: block !important;\r\n  }\r\n  .navbar .mainside a{\r\n    background: #8364e2;\r\n    &:hover{\r\n      box-shadow: 2px 2px 20px 0px #8364e2;\r\n    }\r\n  }\r\n  .item-dropdown{\r\n    .dropdown{\r\n      a{\r\n        &:hover{\r\n          background: #8364e2;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  .btn-main{\r\n    background: #8364e2;\r\n    &:hover{\r\n      box-shadow: 2px 2px 20px 0px #8364e2;\r\n    }\r\n  }\r\n  p.lead{\r\n    color: #a2a2a2;\r\n  }\r\n  .navbar .navbar-item .lines{\r\n    border-bottom: 2px solid #8364e2;\r\n  }\r\n  .jumbotron.no-bg{\r\n    height: 100vh;\r\n    overflow: hidden;\r\n    background-repeat: repeat;\r\n    background-size: cover;\r\n    background-position: bottom;\r\n    background-repeat: no-repeat;\r\n  }\r\n  #tsparticles{\r\n    top: 0;\r\n  }\r\n  .text-uppercase.color{\r\n    color: #8364e2;\r\n  }\r\n  .de_count h3 {\r\n    font-size: 36px;\r\n    margin-bottom: 0px;\r\n  }\r\n  .de_count h5{\r\n    font-size: 14px;\r\n    font-weight: 500;\r\n  }\r\n  h2 {\r\n    font-size: 30px;\r\n  }\r\n  .box-url{\r\n    text-align: center;\r\n    h4{\r\n      font-size: 16px;\r\n    }\r\n  }\r\n  .de_countdown{\r\n    border: solid 2px #8364e2;\r\n  }\r\n  .author_list_pp, .author_list_pp i, \r\n  .nft_coll_pp i, .feature-box.style-3 i, \r\n  footer.footer-light #form_subscribe #btn-subscribe i, \r\n  #scroll-to-top div{\r\n    background: #8364e2;\r\n  }\r\n  footer.footer-light .subfooter .social-icons span i{\r\n    background: #403f83;\r\n  }\r\n  .author_list_pp:hover img{\r\n    box-shadow: 0px 0px 0px 2px #8364e2;\r\n  }\r\n  .nft__item_action span{\r\n    color: #8364e2;\r\n  }\r\n  .feature-box.style-3 i.wm{\r\n    color: rgba(131,100,226, .1);\r\n  }\r\n  @media only screen and (max-width: 1199px) {\r\n    .navbar{\r\n      \r\n    }\r\n    .navbar .menu-line, .navbar .menu-line1, .navbar .menu-line2{\r\n      background: #fff;\r\n    }\r\n    .item-dropdown .dropdown a{\r\n      color: #fff !important;\r\n    }\r\n  }\r\n`;\r\n\r\nconst Shop = () => {\r\n  const { t } = useTranslation();\r\n  const dispatch = useDispatch();\r\n  var Web3 = require(\"web3\");\r\n  const blockchain = useSelector((state) => state.blockchain);\r\n  const data = useSelector((state) => state.data);\r\n  const [approved, setApproved] = useState(\"\");\r\n  const { JTOKENAddress, RANDOMNFTAddress } = useBetween(useSharableState);\r\n  const [loading, setLoading] = useState(false);\r\n  const [nftSales, setNFTSales] = useState(\"\");\r\n  const [openMenu, setOpenMenu] = useState(true);\r\n  const [openMenu1, setOpenMenu1] = useState(false);\r\n\r\n  const checkNFTApproval = () => {\r\n    blockchain.JTOKEN.methods\r\n      .allowance(blockchain.account, RANDOMNFTAddress)\r\n      .call({ from: blockchain.account })\r\n      .then((receipt) => {\r\n        setApproved(receipt);\r\n      });\r\n  };\r\n\r\n  const renderBtn = () => {\r\n    const display = [];\r\n    if (blockchain.account !== null && approved !== \"0\") {\r\n      display.push(\r\n        <button\r\n          className=\"btn btn-purple mt-2 btn btn-primary\"\r\n          onClick={buyNFT}\r\n          disabled={loading}\r\n        >\r\n          Buy\r\n        </button>\r\n      );\r\n    } else {\r\n      display.push(\r\n        <>\r\n          <button\r\n            className=\"btn btn-purple mt-2 btn btn-primary\"\r\n            onClick={approveNFTAddress}\r\n            disabled={loading}\r\n          >\r\n            Approve\r\n          </button>\r\n        </>\r\n      );\r\n    }\r\n    return display;\r\n  };\r\n\r\n  const buyNFT = () => {\r\n    setLoading(true);\r\n    let amount = Web3.utils.toWei(String(\"1\"), \"ether\");\r\n    let tmp_hashedValue = amount + 1111;\r\n    let hashedValue = Web3.utils.sha3(tmp_hashedValue, { encoding: \"hex\" });\r\n    blockchain.RANDOMNFT.methods\r\n      .mintNFT(amount, hashedValue)\r\n      .send({ from: blockchain.account })\r\n      .once(\"error\", (err) => {\r\n        console.log(err);\r\n        setLoading(false);\r\n      })\r\n      .then((receipt) => {\r\n        setLoading(false);\r\n        window.location.reload();\r\n      });\r\n  };\r\n\r\n  const approveNFTAddress = () => {\r\n    setLoading(true);\r\n    let amount = Web3.utils.toWei(String(\"9999999999\"), \"ether\");\r\n    blockchain.JTOKEN.methods\r\n      .approve(RANDOMNFTAddress, amount)\r\n      .send({ from: blockchain.account })\r\n      .once(\"error\", (err) => {\r\n        setLoading(false);\r\n        console.log(err);\r\n        setLoading(false);\r\n      })\r\n      .then((receipt) => {\r\n        setLoading(false);\r\n        window.location.reload();\r\n      });\r\n  };\r\n\r\n  const handleOnSalesClick = () => {\r\n    setOpenMenu1(!openMenu1);\r\n    setOpenMenu(false);\r\n    document.getElementById(\"mainbtn1\").classList.add(\"active\");\r\n    document.getElementById(\"mainbtn\").classList.remove(\"active\");\r\n  };\r\n\r\n  const handleItemClick = () => {\r\n    setOpenMenu(!openMenu);\r\n    setOpenMenu1(false);\r\n    document.getElementById(\"mainbtn\").classList.add(\"active\");\r\n    document.getElementById(\"mainbtn1\").classList.remove(\"active\");\r\n  };\r\n\r\n  let items = 0;\r\n\r\n  for (var i = 0; i < data.getPlayerNFT.length; i++) {\r\n    items++;\r\n  }\r\n  console.log(data.getPlayerNFT);\r\n\r\n  useEffect(() => {\r\n    if (blockchain.account !== null) {\r\n      dispatch(fetchData(blockchain.account));\r\n      checkNFTApproval();\r\n    }\r\n  }, [blockchain.JTOKEN]); // eslint-disable-line\r\n\r\n  return (\r\n    <div>\r\n      <GlobalStyles />\r\n      <section className=\"mt-5 no-bottom\">\r\n        <div className=\"scroll home-margin nft-bg\">\r\n          <div className=\"wrap-img wrap-img1\">\r\n            <Image className=\"nft-image img1\" src={nft1}></Image>\r\n            <Image\r\n              className=\"nft-name\"\r\n              src={hovernft1}\r\n              style={{ left: \"-7px\" }}\r\n            ></Image>\r\n          </div>\r\n          <div className=\"wrap-img wrap-img1\">\r\n            <Image className=\"nft-image img2\" src={nft2}></Image>\r\n            <Image className=\"nft-name\" src={hovernft2}></Image>\r\n          </div>\r\n          <div className=\"wrap-img wrap-img1\">\r\n            <Image className=\"nft-image img1\" src={nft3}></Image>\r\n            <Image className=\"nft-name\" src={hovernft3}></Image>\r\n          </div>\r\n          <div className=\"wrap-img wrap-img1\">\r\n            <Image className=\"nft-image img4\" src={nft4}></Image>\r\n            <Image className=\"nft-name\" src={hovernft4}></Image>\r\n          </div>\r\n          <div className=\"wrap-img wrap-img1\">\r\n            <Image className=\"nft-image img5\" src={nft5}></Image>\r\n            <Image className=\"nft-name\" src={hovernft5}></Image>\r\n          </div>\r\n        </div>\r\n        <div className=\"row justify-content-center mt-5\">\r\n          <div className=\"col-10\">\r\n            <span className=\"buy-nft\">\r\n              <Image src={card} className=\"mb-4\"></Image>\r\n              <Row className=\"justify-content-center\">{renderBtn()}</Row>\r\n            </span>\r\n          </div>\r\n        </div>\r\n      </section>\r\n\r\n      <section className=\"container\">\r\n        <ul className=\"de_nav text-left mb-4\">\r\n          <li id=\"mainbtn\" className=\"active\">\r\n            <span\r\n              onClick={handleItemClick}\r\n              style={{ textTransform: \"uppercase\" }}\r\n            >\r\n              {t(\"inventory.label\")}\r\n            </span>\r\n          </li>\r\n          <li id=\"mainbtn1\" className=\"\">\r\n            <span\r\n              onClick={handleOnSalesClick}\r\n              style={{ textTransform: \"uppercase\" }}\r\n            >\r\n              {t(\"onmarket.label\")}\r\n            </span>\r\n          </li>\r\n        </ul>\r\n        <div>\r\n          {/* ITEMS */}\r\n          {openMenu && <Inventory />}\r\n\r\n          {/* ON SALES */}\r\n          {openMenu1 && (\r\n            <div className=\"tab-2 onStep fadeIn\">\r\n              <div className=\"row\">\r\n                {data.getSellingNFT.length > 0 ? (\r\n                  data.getSellingNFT.map((nft, index) => {\r\n                    return (\r\n                      <div\r\n                        key={index}\r\n                        className=\"d-item col-lg-3 col-md-6 col-sm-6 col-xs-6 mb-4\"\r\n                      >\r\n                        <div className=\"nft-card\">\r\n                          <div className=\"gradient-box-shadow\">\r\n                            <div\r\n                              className=\"gradient-box-shadow-inner\"\r\n                              style={{ padding: \"15px\" }}\r\n                            >\r\n                              <div className=\"position-relative\">\r\n                                <Image\r\n                                  src={\r\n                                    nft.rarity === \"5\"\r\n                                      ? nft5\r\n                                      : nft.rarity === \"4\"\r\n                                      ? nft4\r\n                                      : nft.rarity === \"3\"\r\n                                      ? nft3\r\n                                      : nft.rarity === \"2\"\r\n                                      ? nft2\r\n                                      : nft.rarity === \"1\"\r\n                                      ? nft1\r\n                                      : null\r\n                                  }\r\n                                  alt=\"nft_image\"\r\n                                  className=\"w-100\"\r\n                                />\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    );\r\n                  })\r\n                ) : (\r\n                  <p className=\"text-center\">{t(\"noData.label\")}</p>\r\n                )}\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Shop;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Link } from \"@reach/router\";\r\nimport loadingImage from \"../../assets/img/loading.png\";\r\nimport loadingShadow from \"../../assets/img/loading-shadow.png\";\r\nimport mysteryBackground from \"../../assets/img/mystery-bg.png\";\r\nimport mysteryBoxTitle from \"../../assets/img/title/Mystery-box.png\";\r\nimport box from \"../../assets/img/Box.png\";\r\nimport { Row, Col, Button, Modal, Image } from \"react-bootstrap\";\r\nimport levelOne from \"../../assets/img/marketplace/Level-1.png\";\r\nimport levelTwo from \"../../assets/img/marketplace/Level-2.png\";\r\nimport levelThree from \"../../assets/img/marketplace/Level-3.png\";\r\nimport { fetchData } from \"../../redux/data/dataActions\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport ClipLoader from \"react-spinners/ClipLoader\";\r\nimport { css } from \"@emotion/react\";\r\nimport CountDownTimer from \"./countdown\";\r\nimport useSharableState from \"../../../src/SharableState.js\";\r\nimport { useBetween } from \"use-between\";\r\nimport Swal from \"sweetalert2\";\r\nimport withReactContent from \"sweetalert2-react-content\";\r\nimport Web3Modal from \"web3modal\";\r\nimport { connect } from \"../../redux/blockchain/blockchainActions\";\r\n\r\n//CONNECT\r\nconst providerOptions = {\r\n  walletconnect: {\r\n    options: {\r\n      rpc: {\r\n        56: \"https://bsc-dataseed.binance.org/\",\r\n      },\r\n      network: \"binance\",\r\n    },\r\n  },\r\n};\r\n\r\nvar Web3 = require(\"web3\");\r\nconst web3Modal = new Web3Modal({\r\n  network: \"binance\", // replace mainnet to binance\r\n  cacheProvider: true, // optional\r\n  providerOptions, // required\r\n});\r\n\r\n(async () => {\r\n  try {\r\n    const provider = await web3Modal.connect();\r\n    const web3 = new Web3(provider); // eslint-disable-line\r\n  } catch (err) {}\r\n})();\r\n\r\n// LOADER\r\nconst override = css`\r\n  border-bottom-color: transparent !important;\r\n  border-color: #ffffff;\r\n  top: 2px;\r\n`;\r\n\r\nconst MysteryBox = () => {\r\n  const { t } = useTranslation();\r\n  const dispatch = useDispatch();\r\n  const [modalState, setModalState] = useState(\"\");\r\n  const blockchain = useSelector((state) => state.blockchain);\r\n  // console.log(\"blockchain\", blockchain);\r\n  const data = useSelector((state) => state.data);\r\n  // console.log(\"data\", data);\r\n  const [loading, setLoading] = useState(false);\r\n  const [nftDetails, setNFTDetails] = useState(\"\");\r\n  const [nftImage, setNFTImage] = useState(\"\");\r\n  const { rate } = useBetween(useSharableState);\r\n  // GLOBAL STATE\r\n  const { nftContractAddress } = useBetween(useSharableState);\r\n  const [approved, setApproved] = useState(\"\");\r\n  const [spaceshardApproved, setSpaceShardApproved] = useState(\"\");\r\n\r\n  const weiValue = Web3.utils.fromWei(data.getSpalBalance, \"ether\");\r\n  let convertRate = weiValue / rate;\r\n  let balance = convertRate.toFixed(2);\r\n  let price = (250 * rate).toFixed(2);\r\n  let mintPrice = Web3.utils.toWei(String(price), \"ether\");\r\n  let hash = Web3.utils.sha3(Web3.utils.toHex(mintPrice), {encoding:\"hex\"});\r\n  let speedUpPrice = Web3.utils.toWei(String(10), \"ether\");\r\n  let tmp_hashedValue = Web3.utils.toWei(String(1), \"ether\") + Web3.utils.toWei(String(1), \"ether\") + 1111;\r\n  let hashedValue = Web3.utils.sha3(tmp_hashedValue, { encoding: \"hex\" });\r\n  console.log (\"1\", hashedValue)\r\n  let tmp_hashedValue2 = Web3.utils.toWei(String(1), \"ether\") + 1111;\r\n  let hashedValue2 = Web3.utils.sha3(tmp_hashedValue2, { encoding: \"hex\" });\r\n  console.log (\"2\", hashedValue2)\r\n\r\n  const image = [\r\n    \"http://localhost:3000/img/marketplace/1.png\",\r\n    \"http://localhost:3000/img/marketplace/2.png\",\r\n    \"http://localhost:3000/img/marketplace/3.png\",\r\n    \"http://localhost:3000/img/marketplace/4.png\",\r\n    \"http://localhost:3000/img/marketplace/5.png\",\r\n  ];\r\n\r\n  //CALCULATE REMAINING TIME\r\n  let hoursMinSecs;\r\n  let hours;\r\n  let minutes;\r\n  let seconds;\r\n  const calculateCountdown = (nftId, createdTime, checkUnboxTime) => {\r\n    //GET CURRENT TIMESTAMP\r\n    var currentTimeInSeconds = Math.floor(Date.now() / 1000);\r\n    var date2 = new Date(createdTime * 1000);\r\n    var date1 = new Date(currentTimeInSeconds * 1000);\r\n    var difference = date1.getTime() - date2.getTime();\r\n    var daysDifference = Math.floor(difference / 1000 / 60 / 60 / 24);\r\n    difference -= daysDifference * 1000 * 60 * 60 * 24;\r\n    var hoursDifference = Math.floor(difference / 1000 / 60 / 60);\r\n    difference -= hoursDifference * 1000 * 60 * 60;\r\n    var minutesDifference = Math.floor(difference / 1000 / 60);\r\n    difference -= minutesDifference * 1000 * 60;\r\n    var secondsDifference = difference / 1000;\r\n\r\n    hours = 24 - hoursDifference;\r\n    minutes = 60 - minutesDifference;\r\n    seconds = 60 - secondsDifference;\r\n\r\n    if (hours === 24 && minutes === 60 && seconds === 60) {\r\n      hours = 23;\r\n      minutes = 59;\r\n      seconds = 59;\r\n    } else if (hours === 24 && minutes === 60) {\r\n      hours = 23;\r\n      minutes = 59;\r\n    } else if (hours === 24) {\r\n      hours = 23;\r\n    }\r\n\r\n    //CHECK SPEEDUP\r\n    var speedUpStatus = currentTimeInSeconds - checkUnboxTime;\r\n    if (speedUpStatus > 86400) {\r\n      hoursMinSecs = { hours: 0, minutes: 0, seconds: 0 };\r\n    } else {\r\n      hoursMinSecs = {\r\n        hours: hours,\r\n        minutes: minutes,\r\n        seconds: seconds,\r\n      };\r\n    }\r\n  };\r\n\r\n  const renderButton = (checkUnboxTime, nftId) => {\r\n    const display = [];\r\n    var currentTimeInSeconds = Math.floor(Date.now() / 1000);\r\n    var speedUpStatus = currentTimeInSeconds - checkUnboxTime;\r\n    if (speedUpStatus > 86400) {\r\n      display.push(\r\n        <Button\r\n          id={`openbtn${nftId}`}\r\n          className=\"btn btn-blue btn-height\"\r\n          onClick={() => {\r\n            handleShowModal(nftId);\r\n          }}\r\n        >\r\n          {t(\"open.label\")}\r\n        </Button>\r\n      );\r\n    } else {\r\n      if (spaceshardApproved === \"0\") {\r\n        display.push(\r\n          <>\r\n            <div\r\n              id=\"loadingSpaceshardbtn\"\r\n              className=\"btn btn-purple btn-padding\"\r\n              style={{ display: \"none\" }}\r\n            >\r\n              <span style={{ margin: \"auto 8px\" }}>{t(\"loading.label\")}</span>\r\n              <ClipLoader loading={loading} css={override} size={17} />\r\n            </div>\r\n            <Button\r\n              id=\"approveSpaceshardbtn\"\r\n              className=\"btn btn-purple btn-padding\"\r\n              onClick={() => {\r\n                approveSpaceShard(nftId);\r\n              }}\r\n            >\r\n              {t(\"approve.label\")}\r\n            </Button>\r\n          </>\r\n        );\r\n      } else {\r\n        display.push(\r\n          <Button\r\n            id={`speedbtn${nftId}`}\r\n            className=\"btn btn-yellow btn-height\"\r\n            onClick={() => {\r\n              speedUp(nftId);\r\n            }}\r\n          >\r\n            {t(\"speedUp.label\")}\r\n          </Button>\r\n        );\r\n      }\r\n    }\r\n    return display;\r\n  };\r\n\r\n  //SPEED UP\r\n  const speedUp = (nftId) => {\r\n    setLoading(true);\r\n    document.getElementById(\"loadingbtn\" + nftId).style.display = \"block\";\r\n    document.getElementById(\"speedbtn\" + nftId).style.display = \"none\";\r\n    blockchain.nftToken.methods\r\n      // .speedUp(nftId, speedUpPrice)\r\n      .speedUp(nftId, 1000000)\r\n      .send({ from: blockchain.account })\r\n      .once(\"error\", (err) => {\r\n        console.log(err);\r\n        setLoading(false);\r\n        document.getElementById(\"loadingbtn\" + nftId).style.display = \"none\";\r\n        document.getElementById(\"speedbtn\" + nftId).style.display = \"block\";\r\n      })\r\n      .then((receipt) => {\r\n        setLoading(false);\r\n        document.getElementById(\"loadingbtn\" + nftId).style.display = \"none\";\r\n        document.getElementById(\"speedbtn\" + nftId).style.display = \"none\";\r\n        document.getElementById(\"openbtn\" + nftId).style.display = \"block\";\r\n        window.location.reload();\r\n      });\r\n  };\r\n\r\n  //FETCH NFT DETAILS\r\n  const fetchNFTDetails = (nftId) => {\r\n    blockchain.nftToken.methods\r\n      .getMintDetails(nftId)\r\n      .call({ from: blockchain.account })\r\n      .then((receipt) => {\r\n        setNFTDetails(receipt[0]);\r\n      });\r\n  };\r\n\r\n  //FETCH NFT IMAGE\r\n  const fetchNFTURI = (nftId) => {\r\n    blockchain.nftToken.methods\r\n      .getNFTURI(nftId)\r\n      .call({ from: blockchain.account })\r\n      .then((receipt) => {\r\n        setNFTImage(receipt);\r\n      });\r\n  };\r\n\r\n  //OPEN BOX FUNCTION AND SHOW MODAL\r\n  const handleShowModal = (nftId) => {\r\n    setLoading(true);\r\n    document.getElementById(\"loadingbtn\" + nftId).style.display = \"block\";\r\n    document.getElementById(\"openbtn\" + nftId).style.display = \"none\";\r\n    blockchain.nftToken.methods\r\n      .openBox(nftId)\r\n      .send({ from: blockchain.account })\r\n      .once(\"error\", (err) => {\r\n        console.log(err);\r\n        setLoading(false);\r\n        document.getElementById(\"loadingbtn\" + nftId).style.display = \"none\";\r\n        document.getElementById(\"openbtn\" + nftId).style.display = \"block\";\r\n      })\r\n      .then((receipt) => {\r\n        setLoading(false);\r\n        document.getElementById(\"loadingbtn\" + nftId).style.display = \"none\";\r\n        document.getElementById(\"openbtn\" + nftId).style.display = \"block\";\r\n        fetchNFTDetails(nftId);\r\n        fetchNFTURI(nftId);\r\n        setModalState(\"goToNFT\");\r\n      });\r\n  };\r\n\r\n  //APPROVE SPAL\r\n  const approveSPAL = () => {\r\n    document.getElementById(\"loadingbtn\").style.display = \"block\";\r\n    document.getElementById(\"approvebtn\").style.display = \"none\";\r\n    setLoading(true);\r\n    blockchain.spal.methods\r\n      .approve(nftContractAddress, Web3.utils.toWei(\"1000000000\", \"ether\"))\r\n      .send({ from: blockchain.account })\r\n      .once(\"error\", (err) => {\r\n        console.log(err);\r\n        setLoading(false);\r\n        document.getElementById(\"loadingbtn\").style.display = \"none\";\r\n        document.getElementById(\"approvebtn\").style.display = \"block\";\r\n      })\r\n      .then((receipt) => {\r\n        setLoading(false);\r\n        document.getElementById(\"loadingbtn\").style.display = \"none\";\r\n        document.getElementById(\"buybtn\").style.display = \"block\";\r\n      });\r\n  };\r\n\r\n  //APPROVE SPACESHARD\r\n  const approveSpaceShard = () => {\r\n    document.getElementById(\"loadingSpaceshardbtn\").style.display = \"block\";\r\n    document.getElementById(\"approveSpaceshardbtn\").style.display = \"none\";\r\n    setLoading(true);\r\n    blockchain.spaceShard.methods\r\n      .approve(nftContractAddress, Web3.utils.toWei(\"1000000000\", \"ether\"))\r\n      .send({ from: blockchain.account })\r\n      .once(\"error\", (err) => {\r\n        console.log(err);\r\n        setLoading(false);\r\n        document.getElementById(\"loadingSpaceshardbtn\").style.display = \"none\";\r\n        document.getElementById(\"approveSpaceshardbtn\").style.display = \"block\";\r\n      })\r\n      .then((receipt) => {\r\n        setLoading(false);\r\n        document.getElementById(\"loadingSpaceshardbtn\").style.display = \"none\";\r\n        // document.getElementById(\"approveSpaceshardbtn\").style.display = \"block\";\r\n        // window.location.reload();\r\n        document.getElementById(\"speedbtn\").style.display = \"none\";\r\n      });\r\n  };\r\n\r\n  //CHECK SPAL APPROVE\r\n  const checkSPAL = () => {\r\n    blockchain.spal.methods\r\n      .allowance(blockchain.account, nftContractAddress)\r\n      .call({ from: blockchain.account })\r\n      .then((receipt) => {\r\n        console.log(\"checkSPALApprove\", receipt);\r\n        setApproved(receipt);\r\n      });\r\n  };\r\n\r\n  //CHECK SPACESHARD APPROVE\r\n  const checkSpaceShard = () => {\r\n    blockchain.spaceShard.methods\r\n      .allowance(blockchain.account, nftContractAddress)\r\n      .call({ from: blockchain.account })\r\n      .then((receipt) => {\r\n        console.log(\"checkSpaceShard\", receipt);\r\n        setSpaceShardApproved(receipt);\r\n      });\r\n  };\r\n\r\n  //MINT NFT\r\n  const mintNFT = () => {\r\n    setLoading(true);\r\n    document.getElementById(\"loadingbtn\").style.display = \"block\";\r\n    document.getElementById(\"buybtn\").style.display = \"none\";\r\n    console.log(balance, price);\r\n    if (balance > price) {\r\n      let randImage = Math.floor(Math.random() * image.length);\r\n      blockchain.nftToken.methods\r\n        .mintNFT(mintPrice, hash)\r\n        .send({ from: blockchain.account })\r\n        .once(\"error\", (err) => {\r\n          console.log(err);\r\n          setLoading(false);\r\n          document.getElementById(\"loadingbtn\").style.display = \"none\";\r\n          document.getElementById(\"buybtn\").style.display = \"block\";\r\n        })\r\n        .then((receipt) => {\r\n          setLoading(false);\r\n          document.getElementById(\"loadingbtn\").style.display = \"none\";\r\n          document.getElementById(\"buybtn\").style.display = \"block\";\r\n          window.location.reload();\r\n        });\r\n    } else {\r\n      document.getElementById(\"loadingbtn\").style.display = \"none\";\r\n      document.getElementById(\"buybtn\").style.display = \"block\";\r\n      const MySwal = withReactContent(Swal);\r\n      MySwal.fire({\r\n        title: \"Warning\",\r\n        text: t(\"insufficientBalance.label\"),\r\n        icon: \"warning\",\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (blockchain.account !== \"\" && blockchain.nftToken != null) {\r\n      dispatch(fetchData(blockchain.account));\r\n      checkSPAL();\r\n      checkSpaceShard();\r\n    }\r\n  }, [blockchain.nftToken]);\r\n\r\n  return (\r\n    <div\r\n      className=\"bg-image\"\r\n      style={{ backgroundImage: `url(${mysteryBackground})` }}\r\n    >\r\n      <section className=\"container\">\r\n        <Row className=\"justify-content-center mt-2\">\r\n          <div\r\n            className=\"col-md-5 nft__item nft_shadow text-center\"\r\n            style={{ borderRadius: \"20px\", padding: \"30px 50px\" }}\r\n          >\r\n            <Row className=\"justify-content-center\">\r\n              <Image src={loadingShadow} style={{ width: \"80%\" }} />\r\n            </Row>\r\n            <h3 className=\"text-price m-0 mb-2\">{price} SPAL</h3>\r\n            <p>\r\n              {t(\"availableBalance.label\")} : {balance} SPAL\r\n            </p>\r\n\r\n            <div\r\n              id=\"loadingbtn\"\r\n              className=\"btn btn-purple\"\r\n              style={{ display: \"none\" }}\r\n            >\r\n              <span style={{ margin: \"auto 8px\" }}>{t(\"loading.label\")}</span>\r\n              <ClipLoader loading={loading} css={override} size={17} />\r\n            </div>\r\n\r\n            {approved !== null && approved !== \"0\" ? (\r\n              <Button\r\n                id=\"buybtn\"\r\n                className=\"btn btn-purple mb-2\"\r\n                onClick={mintNFT}\r\n              >\r\n                {t(\"buy.label\")}\r\n              </Button>\r\n            ) : (\r\n              <>\r\n                <Button\r\n                  id=\"approvebtn\"\r\n                  className=\"btn btn-purple \"\r\n                  onClick={approveSPAL}\r\n                >\r\n                  {t(\"approve.label\")}\r\n                </Button>\r\n                <Button\r\n                  id=\"buybtn\"\r\n                  className=\"btn btn-purple mb-2\"\r\n                  onClick={mintNFT}\r\n                  style={{ display: \"none\" }}\r\n                >\r\n                  {t(\"buy.label\")}\r\n                </Button>\r\n              </>\r\n            )}\r\n          </div>\r\n        </Row>\r\n        <div className=\"spacer-20\"></div>\r\n\r\n        <Row>\r\n          {data.allOwnerNFT.length > 0 ? (\r\n            data.allOwnerNFT.map((nft, index) => {\r\n              //NFT THAT ALREADY REVEALED AND HAVENT BEEN STAKE\r\n              if (nft.revealed === false) {\r\n                calculateCountdown(\r\n                  nft.nextId,\r\n                  nft.createdtime,\r\n                  nft.checkUnboxTime\r\n                );\r\n                return (\r\n                  <div\r\n                    key={index}\r\n                    className=\"col-lg-4 col-md-6 col-sm-6 col-xs-12 d-flex mb-4 p-0 justify-content-center\"\r\n                  >\r\n                    <Image src={loadingImage} style={{ width: \"38%\" }} />\r\n                    <div\r\n                      className=\"position-relative\"\r\n                      style={{ alignSelf: \"flex-end\" }}\r\n                    >\r\n                      <Image src={box} />\r\n                      <div className=\"position-absolute countdown-box text-center\">\r\n                        <div className=\"justify-content-around d-flex\">\r\n                          <h5>-</h5>\r\n                          <h5>-</h5>\r\n                          <h5>-</h5>\r\n                        </div>\r\n                        <p className=\"m-0\">{t(\"countdown.label\")}</p>\r\n                        <CountDownTimer hoursMinSecs={hoursMinSecs} />\r\n                        <div\r\n                          id={`loadingbtn${nft.nextId}`}\r\n                          className=\"btn btn-purple btn-padding\"\r\n                          style={{ display: \"none\" }}\r\n                        >\r\n                          <span style={{ margin: \"auto 8px\" }}>\r\n                            {t(\"loading.label\")}\r\n                          </span>\r\n                          <ClipLoader\r\n                            loading={loading}\r\n                            css={override}\r\n                            size={17}\r\n                          />\r\n                        </div>\r\n                        {renderButton(nft.checkUnboxTime, nft.nextId)}\r\n                        <Button\r\n                          id=\"speedbtn\"\r\n                          className=\"btn btn-yellow btn-height\"\r\n                          onClick={() => {\r\n                            speedUp(nft.nextId);\r\n                          }}\r\n                          style={{ display: \"none\" }}\r\n                        >\r\n                          {t(\"speedUp.label\")}\r\n                        </Button>\r\n                        <Button\r\n                          id={`openbtn${nft.nextId}`}\r\n                          className=\"btn btn-blue btn-height\"\r\n                          onClick={() => {\r\n                            handleShowModal(nft.nextId);\r\n                          }}\r\n                          style={{ display: \"none\" }}\r\n                        >\r\n                          {t(\"open.label\")}\r\n                        </Button>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                );\r\n              } else {\r\n                return null;\r\n              }\r\n            })\r\n          ) : (\r\n            <></>\r\n          )}\r\n        </Row>\r\n      </section>\r\n\r\n      {/* GO TO NFT MODAL*/}\r\n      <Modal show={modalState === \"goToNFT\"} dialogClassName=\"mysteryBox\">\r\n        <Modal.Body className=\"nft_shadow text-center text-white\">\r\n          <Image src={mysteryBoxTitle} style={{ width: \"45%\" }} />\r\n          <Row className=\"justify-content-center\">\r\n            <Row className=\"justify-content-center mt-3\">\r\n              <Col md={5}>\r\n                <div className=\"position-relative\">\r\n                  <Image\r\n                    src={nftImage}\r\n                    className=\"img-fluid img-rounded mb-sm-30\"\r\n                    alt=\"\"\r\n                  />\r\n                  <Image\r\n                    src={\r\n                      nftDetails.level === \"1\"\r\n                        ? levelOne\r\n                        : nftDetails.level === \"2\"\r\n                        ? levelTwo\r\n                        : nftDetails.level === \"3\"\r\n                        ? levelThree\r\n                        : null\r\n                    }\r\n                    className=\"modal-level-icon\"\r\n                    alt=\"level\"\r\n                  />\r\n                </div>\r\n              </Col>\r\n            </Row>\r\n            <Col md={6}>\r\n              <Link\r\n                className=\"btn btn-purple mt-4\"\r\n                to={`/nftDetail/${nftDetails.nextId}`}\r\n              >\r\n                {`${t(\"goTo.label\")} ${t(\"NFT.label\")}`}\r\n              </Link>\r\n            </Col>\r\n          </Row>\r\n        </Modal.Body>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MysteryBox;\r\n","export default __webpack_public_path__ + \"static/media/loading.3deef396.png\";","export default __webpack_public_path__ + \"static/media/loading-shadow.fc84609e.png\";","export default __webpack_public_path__ + \"static/media/mystery-bg.5b73d5ae.png\";","export default __webpack_public_path__ + \"static/media/Mystery-box.b66a447a.png\";","export default __webpack_public_path__ + \"static/media/Box.8f4c3979.png\";","export default __webpack_public_path__ + \"static/media/Level-1.b07d4615.png\";","export default __webpack_public_path__ + \"static/media/Level-2.f04fbfbb.png\";","export default __webpack_public_path__ + \"static/media/Level-3.a030ca16.png\";","const config = {\r\n    dbURL: 'http://localhost:8002',\r\n};\r\nexport default config;","import axios from 'axios';\r\nimport config from '../config';\r\n\r\naxios.defaults.baseURL = config.dbURL;\r\n\r\nexport default function apiCaller(path, data = {}, method = 'POST') {\r\n    const methods = {\r\n        DELETE: 'delete',\r\n        GET: 'get',\r\n        HEAD: 'head',\r\n        OPTIONS: 'options',\r\n        PATCH: 'patch',\r\n        POST: 'post',\r\n        PUT: 'put',\r\n    };\r\n\r\n    axios.defaults.headers.AuthorizationPath = window.location.pathname;\r\n    axios.defaults.headers.Authorization = `Bearer ${localStorage.getItem(\r\n        'adminToken'\r\n    )}`;\r\n    axios.defaults.headers['Access-Control-Allow-Origin'] = '*';\r\n\r\n    /** @type {(url: string, data?: any, config?: AxiosRequestConfig) => AxiosResponse}  */\r\n    const func = axios[methods[method] || 'post'];\r\n\r\n    return func(path, data)\r\n        .then((response) => response.data)\r\n        // .catch(handleError);\r\n}","export default __webpack_public_path__ + \"static/media/On-sales.0f04f319.png\";","export default __webpack_public_path__ + \"static/media/NFT-detail.2bf16e75.png\";","export default __webpack_public_path__ + \"static/media/Gift-away.ae3c505b.png\";","export default __webpack_public_path__ + \"static/media/Update-price.78ee282c.png\";","export default __webpack_public_path__ + \"static/media/Cancel-sales.7dce9348.png\";","import React, { useEffect, useState } from \"react\";\nimport { createGlobalStyle } from \"styled-components\";\nimport { useTranslation } from \"react-i18next\";\nimport levelOne from \"../../assets/img/marketplace/Level-1.png\";\nimport levelTwo from \"../../assets/img/marketplace/Level-2.png\";\nimport levelThree from \"../../assets/img/marketplace/Level-3.png\";\nimport { Row, Col, Button, Modal, Image } from \"react-bootstrap\";\nimport nftBackground from \"../../assets/img/NFT-detail.png\";\nimport closeIcon from \"../../assets/img/Close.png\";\nimport selling from \"../../assets/img/title/Selling.png\";\nimport gifting from \"../../assets/img/title/Gift-away.png\";\nimport updatePriceTitle from \"../../assets/img/title/Update-price.png\";\nimport cancelSalesTitle from \"../../assets/img/title/Cancel-sales.png\";\nimport onSales from \"../../assets/img/On-sales.png\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchData } from \"../../redux/data/dataActions\";\nimport tokenName from \"./tokenName.js\";\nimport useSharableState from \"../../../src/SharableState.js\";\nimport { useBetween } from \"use-between\";\nimport ClipLoader from \"react-spinners/ClipLoader\";\nimport { css } from \"@emotion/react\";\nimport Swal from \"sweetalert2\";\nimport withReactContent from \"sweetalert2-react-content\";\n\nconst GlobalStyles = createGlobalStyle`\n  header#myHeader.navbar.white {\n    background: #212428;\n  }\n`;\n\n// LOADER\nconst override = css`\n  border-bottom-color: transparent !important;\n  border-color: #ffffff;\n  top: 2px;\n`;\n\nconst tokenOption = [\n  { value: \"0\", label: \"SPAL\" },\n  { value: \"1\", label: \"SpaceShard\" },\n];\n\nconst NFTDetail = (props) => {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const [modalState, setModalState] = useState(\"\");\n  const blockchain = useSelector((state) => state.blockchain);\n  // GLOBAL STATE\n  const {\n    marketPlaceAddress,\n    nftContractAddress,\n    spalAddress,\n    spaceShardAddress,\n  } = useBetween(useSharableState);\n  const [nftImage, setNFTImage] = useState(\"\");\n  const [nftDetails, setNFTDetails] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [marketItem, setMarketItem] = useState(\"\");\n  const [newPrice, setNewPrice] = useState(\"\");\n  const [recipientAddress, setRecipientAddress] = useState(\"\");\n  const [sellingPrice, setSellingPrice] = useState(\"0\");\n  const [token, setToken] = useState(spalAddress);\n  const [nftPrice, setNFTPrice] = useState(\"\");\n  const { rate } = useBetween(useSharableState);\n  const [approved, setApproved] = useState(\"\");\n  const [spalApproved, setSPALApproved] = useState(\"\");\n  const [spaceshardApproved, setSpaceShardApproved] = useState(\"\");\n  const [marketspaceshard, setMarketSpaceShard] = useState(\"\");\n  const [marketSPAL, setMarketSPAL] = useState(\"\");\n\n  const [openMenu, setOpenMenu] = useState(true);\n  const [openMenu1, setOpenMenu1] = useState(false);\n  const handleBtnClick = () => {\n    setOpenMenu(!openMenu);\n    setOpenMenu1(false);\n    document.getElementById(\"mainbtn\").classList.add(\"active\");\n    document.getElementById(\"mainbtn1\").classList.remove(\"active\");\n  };\n  const handleBtnClick1 = () => {\n    setOpenMenu1(!openMenu1);\n    setOpenMenu(false);\n    document.getElementById(\"mainbtn1\").classList.add(\"active\");\n    document.getElementById(\"mainbtn\").classList.remove(\"active\");\n  };\n  const handleShowSellModal = () => {\n    setModalState(\"sellNFTModal\");\n  };\n  const handleShowGiftModal = () => {\n    setModalState(\"giftNFTModal\");\n  };\n  const handleShowUpdateModal = () => {\n    setModalState(\"updateNFTPrice\");\n  };\n  const handleShowCancelModal = () => {\n    setModalState(\"cancelSalesModal\");\n  };\n  const handleClose = () => {\n    setModalState(\"close\");\n  };\n\n  let nullAddress = \"0x0000000000000000000000000000000000000000\";\n\n  //CHECK NFT APPROVED\n  const checkApprove = (nftId) => {\n    blockchain.nftToken.methods\n      .getApproved(nftId)\n      .call({ from: blockchain.account })\n      .then((receipt) => {\n        console.log(\"approve\", receipt);\n        setApproved(receipt);\n      });\n  };\n\n  //FETCH NFT DETAILS\n  const fetchNFTDetails = (nftId) => {\n    blockchain.nftToken.methods\n      .getMintDetails(nftId)\n      .call({ from: blockchain.account })\n      .then((receipt) => {\n        setNFTDetails(receipt[0]);\n      });\n  };\n\n  //FETCH NFT IMAGE\n  const fetchNFTURI = (nftId) => {\n    blockchain.nftToken.methods\n      .getNFTURI(nftId)\n      .call({ from: blockchain.account })\n      .then((receipt) => {\n        setNFTImage(receipt);\n      });\n  };\n\n  let image, level, rarity, ownerAddress;\n\n  if (props.event === \"buy\" || props.event === \"sales\") {\n    image = marketItem.tokenURI;\n    level = marketItem.level;\n    rarity = marketItem.rarity;\n    ownerAddress = marketItem.seller;\n  } else {\n    image = nftImage;\n    level = nftDetails.level;\n    rarity = nftDetails.rarity;\n    ownerAddress = nftDetails.seller;\n  }\n\n  //FETCH MARKET ITEM\n  const fetchMarketItem = (itemID) => {\n    blockchain.nftMarket.methods\n      .getMarketItem(itemID)\n      .call({ from: blockchain.account })\n      .then((receipt) => {\n        // console.log(\"marketItem\", receipt);\n        setNFTPrice(receipt.price);\n        setMarketItem(receipt);\n      });\n  };\n  var Web3 = require(\"web3\");\n  const weiValue = Web3.utils.fromWei(String(nftPrice), \"ether\");\n\n  //FROM WEI TO USD\n  const convertToUSD = (nftPrice) => {\n    if (nftPrice) {\n      const weiValue = Web3.utils.fromWei(String(nftPrice), \"ether\");\n      let balance = weiValue * rate;\n      return balance.toFixed(18);\n    }\n  };\n\n  //APPROVE NFT\n  const approve = () => {\n    document.getElementById(\"loading\").style.display = \"block\";\n    document.getElementById(\"approvebtn\").style.display = \"none\";\n    setLoading(true);\n    blockchain.nftToken.methods\n      .approve(marketPlaceAddress, props.nftId)\n      .send({ from: blockchain.account })\n      .once(\"error\", (err) => {\n        console.log(err);\n        setLoading(false);\n        document.getElementById(\"loading\").style.display = \"none\";\n        document.getElementById(\"approvebtn\").style.display = \"block\";\n      })\n      .then((receipt) => {\n        setLoading(false);\n        document.getElementById(\"loading\").style.display = \"none\";\n        document.getElementById(\"approvebtn\").style.display = \"block\";\n        window.location.reload();\n      });\n  };\n\n  //CHECK SPAL APPROVE\n  const checkSPAL = () => {\n    blockchain.spal.methods\n      .allowance(blockchain.account, nftContractAddress)\n      .call({ from: blockchain.account })\n      .then((receipt) => {\n        console.log(\"checkSPALApprove\", receipt);\n        setSPALApproved(receipt);\n      });\n  };\n\n  //CHECK SPACESHARD APPROVE\n  const checkSpaceShard = () => {\n    blockchain.spaceShard.methods\n      .allowance(blockchain.account, nftContractAddress)\n      .call({ from: blockchain.account })\n      .then((receipt) => {\n        console.log(\"checkSpaceShard\", receipt);\n        setSpaceShardApproved(receipt);\n      });\n  };\n\n  //CHECK SPACESHARD MARKETPLACE BUY\n  const checkMarketSpaceShard = () => {\n    blockchain.spaceShard.methods\n      .allowance(blockchain.account, marketPlaceAddress)\n      .call({ from: blockchain.account })\n      .then((receipt) => {\n        console.log(\"checkMarketSpaceShard\", receipt);\n        setMarketSpaceShard(receipt);\n      });\n  };\n\n  //CHECK SPACESHARD MARKETPLACE BUY\n  const checkMarketSpal = () => {\n    blockchain.spal.methods\n      .allowance(blockchain.account, marketPlaceAddress)\n      .call({ from: blockchain.account })\n      .then((receipt) => {\n        console.log(\"checkMarketSpal\", receipt);\n        setMarketSPAL(receipt);\n      });\n  };\n\n  //APPROVE MARKET SPAL\n  const approveMarketSPAL = () => {\n    document.getElementById(\"loadingbuy\").style.display = \"block\";\n    document.getElementById(\"approveSPAL\").style.display = \"none\";\n    setLoading(true);\n    blockchain.spal.methods\n      .approve(marketPlaceAddress, Web3.utils.toWei(\"1000000000\", \"ether\"))\n      .send({ from: blockchain.account })\n      .once(\"error\", (err) => {\n        console.log(err);\n        setLoading(false);\n        document.getElementById(\"loadingbuy\").style.display = \"none\";\n        document.getElementById(\"approveSPAL\").style.display = \"block\";\n      })\n      .then((receipt) => {\n        setLoading(false);\n        document.getElementById(\"loadingbuy\").style.display = \"none\";\n        document.getElementById(\"approveSPAL\").style.display = \"none\";\n        document.getElementById(\"approvedbuybtn\").style.display = \"block\";\n        // window.location.reload();\n      });\n  };\n\n  //APPROVE MARKET SPACESHARD\n  const approveMarketSpaceShard = () => {\n    document.getElementById(\"loadingbuy\").style.display = \"block\";\n    document.getElementById(\"approveSpaceshard\").style.display = \"none\";\n    setLoading(true);\n    blockchain.spaceShard.methods\n      .approve(marketPlaceAddress, Web3.utils.toWei(\"1000000000\", \"ether\"))\n      .send({ from: blockchain.account })\n      .once(\"error\", (err) => {\n        console.log(err);\n        setLoading(false);\n        document.getElementById(\"loadingbuy\").style.display = \"none\";\n        document.getElementById(\"approveSpaceshard\").style.display = \"block\";\n      })\n      .then((receipt) => {\n        setLoading(false);\n        document.getElementById(\"loadingbuy\").style.display = \"none\";\n        document.getElementById(\"approveSpaceshard\").style.display = \"none\";\n        document.getElementById(\"approvedbuybtn\").style.display = \"block\";\n      });\n  };\n\n  //APPROVE SPAL\n  const approveSPAL = () => {\n    document.getElementById(\"loadingSell\").style.display = \"block\";\n    document.getElementById(\"approveSPAL\").style.display = \"none\";\n    setLoading(true);\n    blockchain.spal.methods\n      .approve(nftContractAddress, Web3.utils.toWei(\"1000000000\", \"ether\"))\n      .send({ from: blockchain.account })\n      .once(\"error\", (err) => {\n        console.log(err);\n        setLoading(false);\n        document.getElementById(\"loadingSell\").style.display = \"none\";\n        document.getElementById(\"approveSPAL\").style.display = \"block\";\n      })\n      .then((receipt) => {\n        setLoading(false);\n        document.getElementById(\"loadingSell\").style.display = \"none\";\n        document.getElementById(\"approveSPAL\").style.display = \"none\";\n        document.getElementById(\"sellbtn\").style.display = \"block\";\n      });\n  };\n\n  //APPROVE SPACESHARD\n  const approveSpaceShard = (nftId) => {\n    document.getElementById(\"loadingSell\").style.display = \"block\";\n    document.getElementById(\"approveSpaceshard\").style.display = \"none\";\n    setLoading(true);\n    blockchain.spaceShard.methods\n      .approve(nftContractAddress, Web3.utils.toWei(\"1000000000\", \"ether\"))\n      .send({ from: blockchain.account })\n      .once(\"error\", (err) => {\n        console.log(err);\n        setLoading(false);\n        document.getElementById(\"loadingSell\").style.display = \"none\";\n        document.getElementById(\"approveSpaceshard\").style.display = \"block\";\n      })\n      .then((receipt) => {\n        setLoading(false);\n        document.getElementById(\"loadingSell\").style.display = \"none\";\n        document.getElementById(\"approveSpaceshard\").style.display = \"none\";\n        document.getElementById(\"speedbtn\" + nftId).style.display = \"block\";\n      });\n  };\n\n  //RENDER LEVEL BUTTON\n  const renderLevel = () => {\n    const display = [];\n\n    if (level < 3) {\n      if (spaceshardApproved === nullAddress) {\n        display.push(\n          <Button\n            id=\"approvebtn\"\n            className=\"btn btn-purple mt-2\"\n            onClick={approveSpaceShard}\n          >\n            {t(\"approve.label\")}\n          </Button>\n        );\n      } else {\n        display.push(\n          <Col md=\"auto\">\n            <div\n              id=\"loadingLevel\"\n              className=\"btn btn-purple\"\n              style={{ display: \"none\" }}\n            >\n              <span style={{ margin: \"auto 8px\" }}>{t(\"loading.label\")}</span>\n              <ClipLoader loading={loading} css={override} size={17} />\n            </div>\n\n            <Button\n              id=\"levelbtn\"\n              className=\"btn btn-green\"\n              onClick={() => {\n                levelUp(level);\n              }}\n            >\n              {t(\"levelUp.label\")}\n            </Button>\n          </Col>\n        );\n      }\n    }\n\n    return display;\n  };\n\n  //BUY NFT\n  const buyNFT = (price, tokenAddress) => {\n    console.log(nftContractAddress, tokenAddress, props.nftId, price);\n    setLoading(true);\n    document.getElementById(\"loadingbuy\").style.display = \"block\";\n    document.getElementById(\"buybtn\").style.display = \"none\";\n    blockchain.nftMarket.methods\n      .createMarketSale(nftContractAddress, tokenAddress, props.nftId, price)\n      .send({ from: blockchain.account })\n      .once(\"error\", (err) => {\n        console.log(err);\n        setLoading(false);\n        document.getElementById(\"loadingbuy\").style.display = \"none\";\n        document.getElementById(\"buybtn\").style.display = \"block\";\n      })\n      .then((receipt) => {\n        setLoading(false);\n        document.getElementById(\"loadingbuy\").style.display = \"none\";\n        document.getElementById(\"buybtn\").style.display = \"block\";\n        window.location.href = \"/nft\";\n      });\n  };\n\n  //SELL NFT\n  const createMarketItem = () => {\n    if (sellingPrice === \"0\") {\n      const MySwal = withReactContent(Swal);\n      MySwal.fire({\n        title: \"Warning\",\n        text: t(\"pleaseEnterPrice.label\"),\n        icon: \"warning\",\n      });\n    } else {\n      const nftSellingPrice = Web3.utils.toWei(String(sellingPrice), \"ether\");\n      setLoading(true);\n      document.getElementById(\"loadingSell\").style.display = \"block\";\n      document.getElementById(\"sellbtn\").style.display = \"none\";\n      blockchain.nftMarket.methods\n        .createMarketItem(\n          nftContractAddress,\n          props.nftId,\n          nftSellingPrice,\n          token\n        )\n        .send({ from: blockchain.account })\n        .once(\"error\", (err) => {\n          console.log(err);\n          setLoading(false);\n          document.getElementById(\"loadingSell\").style.display = \"none\";\n          document.getElementById(\"sellbtn\").style.display = \"block\";\n        })\n        .then((receipt) => {\n          setLoading(false);\n          document.getElementById(\"loadingSell\").style.display = \"none\";\n          document.getElementById(\"sellbtn\").style.display = \"none\";\n          window.location.href = \"/nft\";\n        });\n    }\n  };\n\n  //GIFT NFT\n  const giftNFT = () => {\n    if (recipientAddress === \"\") {\n      const MySwal = withReactContent(Swal);\n      MySwal.fire({\n        title: \"Warning\",\n        text: t(\"pleaseEnterRecipientAddress.label\"),\n        icon: \"warning\",\n      });\n    } else {\n      setLoading(true);\n      document.getElementById(\"loadingGift\").style.display = \"block\";\n      document.getElementById(\"giftbtn\").style.display = \"none\";\n      blockchain.nftToken.methods\n        .transferFrom(blockchain.account, recipientAddress, props.nftId)\n        .send({ from: blockchain.account })\n        .once(\"error\", (err) => {\n          console.log(err);\n          setLoading(false);\n          document.getElementById(\"loadingGift\").style.display = \"none\";\n          document.getElementById(\"giftbtn\").style.display = \"block\";\n        })\n        .then((receipt) => {\n          setLoading(false);\n          document.getElementById(\"loadingGift\").style.display = \"none\";\n          document.getElementById(\"giftbtn\").style.display = \"block\";\n          window.location.href = \"/nft\";\n        });\n    }\n  };\n\n  //LEVEL UP\n  const levelUp = (level) => {\n    let levelUpPrice = 0;\n    if (level === \"1\") {\n      levelUpPrice = Web3.utils.toWei(String(1000), \"ether\");\n    } else if (level === \"2\") {\n      levelUpPrice = Web3.utils.toWei(String(3000), \"ether\");\n    }\n    setLoading(true);\n    document.getElementById(\"loadingLevel\").style.display = \"block\";\n    document.getElementById(\"levelbtn\").style.display = \"none\";\n    blockchain.nftToken.methods\n      .upNFTLevel(props.nftId, spaceShardAddress, 10000000)\n      .send({ from: blockchain.account })\n      .once(\"error\", (err) => {\n        console.log(err);\n        setLoading(false);\n        document.getElementById(\"loadingLevel\").style.display = \"none\";\n        document.getElementById(\"levelbtn\").style.display = \"block\";\n      })\n      .then((receipt) => {\n        setLoading(false);\n        document.getElementById(\"loadingLevel\").style.display = \"none\";\n        document.getElementById(\"levelbtn\").style.display = \"block\";\n        window.location.reload();\n      });\n  };\n\n  //UPDATE PRICE\n  const updatePrice = () => {\n    if (newPrice === \"\") {\n      const MySwal = withReactContent(Swal);\n      MySwal.fire({\n        title: \"Warning\",\n        text: t(\"pleaseEnterPrice.label\"),\n        icon: \"warning\",\n      });\n    } else {\n      const etherValue = Web3.utils.toWei(String(newPrice), \"ether\");\n      console.log(etherValue);\n\n      setLoading(true);\n      document.getElementById(\"loadingUpdate\").style.display = \"block\";\n      document.getElementById(\"updatebtn\").style.display = \"none\";\n      blockchain.nftMarket.methods\n        .updatePrice(props.nftId, newPrice)\n        .send({ from: blockchain.account })\n        .once(\"error\", (err) => {\n          console.log(err);\n          setLoading(false);\n          document.getElementById(\"loadingUpdate\").style.display = \"none\";\n          document.getElementById(\"updatebtn\").style.display = \"block\";\n        })\n        .then((receipt) => {\n          setLoading(false);\n          document.getElementById(\"loadingUpdate\").style.display = \"none\";\n          document.getElementById(\"updatebtn\").style.display = \"block\";\n          window.location.reload();\n        });\n    }\n  };\n\n  //CANCEL SALES\n  const cancelSales = () => {\n    setLoading(true);\n    document.getElementById(\"loadingCancel\").style.display = \"block\";\n    document.getElementById(\"cancelbtn\").style.display = \"none\";\n    blockchain.nftMarket.methods\n      .cancelMarketItem(nftContractAddress, props.nftId)\n      .send({ from: blockchain.account })\n      .once(\"error\", (err) => {\n        console.log(err);\n        setLoading(false);\n        document.getElementById(\"loadingCancel\").style.display = \"none\";\n        document.getElementById(\"cancelbtn\").style.display = \"block\";\n      })\n      .then((receipt) => {\n        setLoading(false);\n        document.getElementById(\"loadingCancel\").style.display = \"none\";\n        document.getElementById(\"cancelbtn\").style.display = \"block\";\n        window.location.href = \"/nft\";\n      });\n  };\n\n  useEffect(() => {\n    if (blockchain.account !== \"\" && blockchain.nftToken != null) {\n      dispatch(fetchData(blockchain.account));\n      if (props.event === \"buy\" || props.event === \"sales\") {\n        fetchMarketItem(props.nftId);\n        checkMarketSpaceShard();\n        checkMarketSpal();\n      } else {\n        fetchNFTDetails(props.nftId);\n        fetchNFTURI(props.nftId);\n        checkApprove(props.nftId);\n        checkSPAL();\n        checkSpaceShard();\n      }\n    }\n  }, [blockchain.nftToken]);\n\n  return (\n    <div\n      className=\"bg-image\"\n      style={{\n        backgroundImage: `url(${nftBackground})`,\n        backgroundSize: \"contain\",\n      }}\n    >\n      <GlobalStyles />\n\n      <section className=\"container\">\n        <div className=\"row mt-4 justify-content-evenly\">\n          <div className=\"col-md-4 text-center \">\n            <div className=\"position-relative\">\n              <Image\n                src={image}\n                className=\"img-fluid img-rounded mb-sm-30\"\n                alt=\"\"\n                style={{ width: \"90%\" }}\n              />\n\n              {props.event === \"buy\" || props.event === \"sales\" ? (\n                <Image\n                  src={onSales}\n                  className=\"onSales position-absolute\"\n                  alt=\"onSales\"\n                />\n              ) : null}\n\n              <Image\n                src={\n                  level === \"1\"\n                    ? levelOne\n                    : level === \"2\"\n                    ? levelTwo\n                    : level === \"3\"\n                    ? levelThree\n                    : null\n                }\n                className=\"level-icon-detail\"\n                alt=\"level\"\n              />\n            </div>\n          </div>\n          <div className=\"col-md-6 \">\n            <div className=\"item_info p-0\">\n              <h2>{tokenName(image)}</h2>\n              {props.event === \"buy\" || props.event === \"sales\" ? (\n                <Row className=\"mb-1\">\n                  <Col>\n                    <h5 className=\"text-price float-left\">\n                      {weiValue}{\" \"}\n                      {marketItem.tokenAddress === spalAddress\n                        ? \"SPAL\"\n                        : marketItem.tokenAddress === spaceShardAddress\n                        ? \"SpaceShard\"\n                        : null}\n                    </h5>\n                    <p className=\"text-white float-right\">\n                      $ {convertToUSD(marketItem.price)}\n                    </p>\n                  </Col>\n                </Row>\n              ) : (\n                <></>\n              )}\n              <div className=\"bg-purple mb-4\">\n                <Row>\n                  <Col>\n                    <p className=\"text-white float-left\">{t(\"level.label\")}</p>\n                    <p className=\"text-white float-right\">{level}</p>\n                  </Col>\n                </Row>\n                <Row>\n                  <Col>\n                    <p className=\"text-white float-left m-0\">\n                      {t(\"rarity.label\")}\n                    </p>\n                    <p className=\"text-white float-right m-0\">\n                      {rarity === \"1\" ? (\n                        <>{t(\"legendary.label\")}</>\n                      ) : rarity === \"2\" ? (\n                        <>{t(\"epic.label\")}</>\n                      ) : rarity === \"3\" ? (\n                        <>{t(\"rare.label\")}</>\n                      ) : rarity === \"4\" ? (\n                        <>{t(\"uncommon.label\")}</>\n                      ) : rarity === \"5\" ? (\n                        <> {t(\"common.label\")}</>\n                      ) : null}\n                    </p>\n                  </Col>\n                </Row>\n              </div>\n\n              <div className=\"de_tab\">\n                <ul className=\"de_nav\">\n                  <li id=\"mainbtn\" className=\"active\">\n                    <span onClick={handleBtnClick}>{t(\"details.label\")}</span>\n                  </li>\n                  <li id=\"mainbtn1\" className=\"\">\n                    <span onClick={handleBtnClick1}>\n                      {t(\"transactionHistory.label\")}\n                    </span>\n                  </li>\n                </ul>\n\n                <div className=\"de_tab_content\">\n                  {/* DETAILS */}\n                  {openMenu && (\n                    <div className=\"tab-1 onStep fadeIn\">\n                      <h5 className=\"mb-4\">\n                        {t(\"tokenID.label\")} :{\" \"}\n                        {props.event === \"sales\" || props.event === \"buy\"\n                          ? marketItem.tokenId\n                          : props.nftId}\n                      </h5>\n                      <p className=\"p-text\">{`${t(\"NFT.label\")} ${t(\n                        \"contractNo.label\"\n                      )}`}</p>\n                      <p\n                        className=\"text-price mb-4 text-break\"\n                        style={{ fontSize: \"larger\" }}\n                      >\n                        {nftContractAddress}\n                      </p>\n                      <p className=\"p-text\">{t(\"ownerAddress.label\")}</p>\n                      <p\n                        className=\"text-price text-break\"\n                        style={{ fontSize: \"larger\" }}\n                      >\n                        {ownerAddress}\n                      </p>\n                    </div>\n                  )}\n\n                  {/* TRANSACTION HISTORY */}\n                  {openMenu1 && (\n                    <div className=\"tab-2 onStep fadeIn\">\n                      <table className=\"table de-table table-rank\">\n                        <thead>\n                          <tr className=\"tr-bg-purple\">\n                            <th scope=\"col\">{t(\"event.label\")}</th>\n                            <th scope=\"col\">{t(\"price.label\")}</th>\n                            <th scope=\"col\">{t(\"hash.label\")}</th>\n                            <th scope=\"col\">{t(\"from.label\")}</th>\n                            <th scope=\"col\">{t(\"to.label\")}</th>\n                            <th scope=\"col\">{t(\"date.label\")}</th>\n                          </tr>\n                        </thead>\n                        <tbody>\n                          <tr>\n                            <td>Buy</td>\n                            <td>70 SPAL</td>\n                            <td>0xbB2...0515</td>\n                            <td>0xbB2...0515</td>\n                            <td>0xbB2...0515</td>\n                            <td>\n                              2022-01-08\n                              <br />\n                              06:57:18\n                            </td>\n                          </tr>\n                        </tbody>\n                      </table>\n                    </div>\n                  )}\n                </div>\n\n                {props.event === \"buy\" ? (\n                  <Row>\n                    <Col md=\"auto\">\n                      <div\n                        id=\"loadingbuy\"\n                        className=\"btn btn-purple\"\n                        style={{ display: \"none\" }}\n                      >\n                        <span style={{ margin: \"auto 8px\" }}>\n                          {t(\"loading.label\")}\n                        </span>\n                        <ClipLoader\n                          loading={loading}\n                          css={override}\n                          size={17}\n                        />\n                      </div>\n\n                      {marketItem.tokenAddress === spalAddress &&\n                      marketSPAL === \"0\" ? (\n                        <Button\n                          id=\"approveSPAL\"\n                          className=\"btn btn-purple mt-2\"\n                          onClick={approveMarketSPAL}\n                          style={{ display: \"block\" }}\n                        >\n                          {t(\"approve.label\")}\n                        </Button>\n                      ) : marketItem.tokenAddress === spaceShardAddress &&\n                        marketspaceshard === \"0\" ? (\n                        <Button\n                          id=\"approveSpaceshard\"\n                          className=\"btn btn-purple mt-2\"\n                          onClick={approveMarketSpaceShard}\n                          style={{ display: \"block\" }}\n                        >\n                          {t(\"approve.label\")}\n                        </Button>\n                      ) : (\n                        <Button\n                          id=\"buybtn\"\n                          className=\"btn btn-purple mt-2\"\n                          onClick={() => {\n                            buyNFT(marketItem.price, marketItem.tokenAddress);\n                          }}\n                          style={{ display: \"block\" }}\n                        >\n                          {t(\"buy.label\")}\n                        </Button>\n                      )}\n\n                      <Button\n                        id=\"approvedbuybtn\"\n                        className=\"btn btn-purple mt-2\"\n                        onClick={() => {\n                          buyNFT(marketItem.price, marketItem.tokenAddress);\n                        }}\n                        style={{ display: \"none\" }}\n                      >\n                        {t(\"buy.label\")}\n                      </Button>\n                    </Col>\n                  </Row>\n                ) : props.event === \"sales\" ? (\n                  <div id=\"sales\">\n                    <Row className=\"mt-2\">\n                      <Col md=\"auto\">\n                        <Button\n                          // id=\"approvebtn\"\n                          className=\"btn btn-purple\"\n                          onClick={() => {\n                            handleShowUpdateModal();\n                          }}\n                        >\n                          {t(\"updatePrice.label\")}\n                        </Button>\n                      </Col>\n                      <Col md=\"auto\">\n                        <Button\n                          // id=\"approvebtn\"\n                          className=\"btn btn-blue\"\n                          onClick={() => {\n                            handleShowCancelModal();\n                          }}\n                        >\n                          {t(\"cancelSales.label\")}\n                        </Button>\n                      </Col>\n                    </Row>\n                  </div>\n                ) : (\n                  <>\n                    {approved === nullAddress ? (\n                      <Row>\n                        <Col md=\"auto\">\n                          <div\n                            id=\"loading\"\n                            className=\"btn btn-purple\"\n                            style={{ display: \"none\" }}\n                          >\n                            <span style={{ margin: \"auto 8px\" }}>\n                              {t(\"loading.label\")}\n                            </span>\n                            <ClipLoader\n                              loading={loading}\n                              css={override}\n                              size={17}\n                            />\n                          </div>\n\n                          <Button\n                            id=\"approvebtn\"\n                            className=\"btn btn-purple mt-2\"\n                            onClick={approve}\n                          >\n                            {t(\"approve.label\")}\n                          </Button>\n                        </Col>\n                      </Row>\n                    ) : (\n                      <Row className=\"mt-2\">\n                        <Col md=\"auto\">\n                          <Button\n                            className=\"btn btn-purple\"\n                            onClick={() => {\n                              handleShowSellModal();\n                            }}\n                          >\n                            {t(\"sell.label\")}\n                          </Button>\n                        </Col>\n                        <Col md=\"auto\">\n                          <Button\n                            className=\"btn btn-blue\"\n                            onClick={() => {\n                              handleShowGiftModal();\n                            }}\n                          >\n                            {t(\"gift.label\")}\n                          </Button>\n                        </Col>\n\n                        {renderLevel()}\n                      </Row>\n                    )}\n                  </>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n      {/* SELL NFT */}\n      <Modal show={modalState === \"sellNFTModal\"} onHide={handleClose}>\n        <Modal.Body className=\"nft_shadow text-center text-white\">\n          <Image src={selling} style={{ width: \"35%\" }} />\n          <Row className=\"justify-content-end mb-3\">\n            <Image\n              src={closeIcon}\n              onClick={handleClose}\n              style={{ width: \"9%\", cursor: \"pointer\" }}\n            />\n          </Row>\n          <Row className=\"justify-content-center\">\n            <Col md={4} className=\"position-relative\">\n              <img\n                src={image}\n                className=\"img-fluid img-rounded mb-sm-30\"\n                alt=\"\"\n              />\n\n              <img\n                src={\n                  level === \"1\"\n                    ? levelOne\n                    : level === \"2\"\n                    ? levelTwo\n                    : level === \"3\"\n                    ? levelThree\n                    : null\n                }\n                className=\"modal-level-icon\"\n                alt=\"level\"\n              />\n            </Col>\n            <Col md={7}>\n              <Row>\n                <Col>\n                  <p className=\"float-left\">{t(\"setPrice.label\")}</p>\n                  <p className=\"float-right\">-${convertToUSD(sellingPrice)}</p>\n                </Col>\n              </Row>\n              <div className=\"position-relative\">\n                <input\n                  type=\"number\"\n                  className=\"form-control tr-bg-purple\"\n                  placeholder={`${t(\"enter.label\")} ${t(\"price.label\")}`}\n                  onChange={(e) => {\n                    setSellingPrice(e.target.value);\n                  }}\n                />\n                <select\n                  className=\"classic form-control token-select\"\n                  onChange={(e) => {\n                    let value = e.target.value;\n                    setToken(value);\n                    if (value === 0) {\n                      setToken(spalAddress);\n                    } else {\n                      setToken(spaceShardAddress);\n                    }\n                  }}\n                >\n                  {tokenOption.map((option, optionIndex) => {\n                    return (\n                      <option\n                        value={option.value}\n                        key={`option_state_${optionIndex}`}\n                      >\n                        {option.label}\n                      </option>\n                    );\n                  })}\n                </select>\n              </div>\n              <div className=\"text-left mb-4 sell-NFT\">\n                <p className=\"m-0\">\n                  {`${t(\"sell.label\")} ${t(\"NFT.label\")}`} :\n                </p>\n                <p className=\"m-0\">1. {t(\"sell1.label\")}</p>\n                <p className=\"m-0\">2. {t(\"sell2.label\")}</p>\n                <p className=\"m-0\">3. {t(\"sell3.label\")}</p>\n              </div>\n              <div\n                id=\"loadingSell\"\n                className=\"btn btn-purple\"\n                style={{ display: \"none\" }}\n              >\n                <span style={{ margin: \"auto 8px\" }}>{t(\"loading.label\")}</span>\n                <ClipLoader loading={loading} css={override} size={17} />\n              </div>\n              {/* CHECK APPROVE FOR CHOSEN TOKEN */}\n              {token === spalAddress && spalApproved === nullAddress ? (\n                <Button\n                  id=\"approveSPAL\"\n                  className=\"btn btn-purple mt-2\"\n                  onClick={approveSPAL}\n                >\n                  {t(\"approve.label\")}\n                </Button>\n              ) : token === spaceShardAddress &&\n                spaceshardApproved === nullAddress ? (\n                <Button\n                  id=\"approveSpaceshard\"\n                  className=\"btn btn-purple mt-2\"\n                  onClick={approveSpaceShard}\n                >\n                  {t(\"approve.label\")}\n                </Button>\n              ) : (\n                <Button\n                  id=\"sellbtn\"\n                  className=\"btn btn-purple\"\n                  onClick={createMarketItem}\n                >\n                  {t(\"confirm.label\")}\n                </Button>\n              )}\n            </Col>\n          </Row>\n        </Modal.Body>\n      </Modal>\n\n      {/* GIFT NFT */}\n      <Modal show={modalState === \"giftNFTModal\"} onHide={handleClose}>\n        <Modal.Body className=\"nft_shadow text-center text-white\">\n          <Image src={gifting} style={{ width: \"45%\" }} />\n          <Row className=\"justify-content-end mb-3\">\n            <Image\n              src={closeIcon}\n              onClick={handleClose}\n              style={{ width: \"9%\", cursor: \"pointer\" }}\n            />\n          </Row>\n          <Row className=\"justify-content-center\">\n            <Col md={4} className=\"position-relative\">\n              <img\n                src={image}\n                className=\"img-fluid img-rounded mb-sm-30\"\n                alt=\"\"\n              />\n\n              <img\n                src={\n                  level === \"1\"\n                    ? levelOne\n                    : level === \"2\"\n                    ? levelTwo\n                    : level === \"3\"\n                    ? levelThree\n                    : null\n                }\n                className=\"gift-level-icon\"\n                alt=\"level\"\n              />\n            </Col>\n            <Col md={7}>\n              <p className=\"text-left\">{t(\"address.label\")}</p>\n              <div className=\"position-relative\">\n                <input\n                  type=\"text\"\n                  className=\"form-control tr-bg-purple\"\n                  placeholder={`${t(\"enter.label\")} ${t(\n                    \"recipientAddress.label\"\n                  )}`}\n                  onChange={(e) => {\n                    setRecipientAddress(e.target.value);\n                  }}\n                />\n              </div>\n              <div className=\"text-left mb-4 sell-NFT\">\n                <p className=\"m-0\">{t(\"gifting1.label\")}</p>\n                <p className=\"m-0\">{t(\"gifting2.label\")}:</p>\n                <p className=\"m-0\">1. {t(\"gifting3.label\")}</p>\n              </div>\n              <div\n                id=\"loadingGift\"\n                className=\"btn btn-purple\"\n                style={{ display: \"none\" }}\n              >\n                <span style={{ margin: \"auto 8px\" }}>{t(\"loading.label\")}</span>\n                <ClipLoader loading={loading} css={override} size={17} />\n              </div>\n              <Button id=\"giftbtn\" className=\"btn btn-purple\" onClick={giftNFT}>\n                {t(\"confirm.label\")}\n              </Button>\n            </Col>\n          </Row>\n        </Modal.Body>\n      </Modal>\n\n      {/* UPDATE PRICE */}\n      <Modal show={modalState === \"updateNFTPrice\"} onHide={handleClose}>\n        <Modal.Body className=\"nft_shadow text-center text-white\">\n          <Image src={updatePriceTitle} style={{ width: \"45%\" }} />\n          <Row className=\"justify-content-end mb-3\">\n            <Image\n              src={closeIcon}\n              onClick={handleClose}\n              style={{ width: \"9%\", cursor: \"pointer\" }}\n            />\n          </Row>\n          <Row className=\"justify-content-center\">\n            <Col md={4} className=\"position-relative\">\n              <img\n                src={image}\n                className=\"img-fluid img-rounded mb-sm-30\"\n                alt=\"\"\n              />\n\n              <img\n                src={\n                  level === \"1\"\n                    ? levelOne\n                    : level === \"2\"\n                    ? levelTwo\n                    : level === \"3\"\n                    ? levelThree\n                    : null\n                }\n                className=\"modal-level-icon\"\n                alt=\"level\"\n              />\n            </Col>\n            <Col md={7}>\n              <p className=\"text-left mb-2\">{t(\"currentPrice.label\")}</p>\n              <div className=\"position-relative\">\n                <input\n                  type=\"text\"\n                  className=\"form-control tr-bg-purple\"\n                  placeholder={weiValue}\n                  disabled\n                />\n                <p className=\"spal-select\">\n                  {marketItem.tokenAddress === spalAddress\n                    ? \"SPAL\"\n                    : marketItem.tokenAddress === spaceShardAddress\n                    ? \"SpaceShard\"\n                    : null}\n                </p>\n              </div>\n              <p className=\"text-left mb-2\">{t(\"newPrice.label\")}</p>\n              <div className=\"position-relative\">\n                <input\n                  type=\"number\"\n                  className=\"form-control tr-bg-purple\"\n                  placeholder={`${t(\"enter.label\")} ${t(\"newPrice.label\")}`}\n                  onChange={(e) => {\n                    setNewPrice(e.target.value);\n                  }}\n                />\n                <p className=\"spal-select\">\n                  {marketItem.tokenAddress === spalAddress\n                    ? \"SPAL\"\n                    : marketItem.tokenAddress === spaceShardAddress\n                    ? \"SpaceShard\"\n                    : null}\n                </p>\n              </div>\n              <div className=\"spacer-20\"></div>\n\n              <div\n                id=\"loadingUpdate\"\n                className=\"btn btn-purple\"\n                style={{ display: \"none\" }}\n              >\n                <span style={{ margin: \"auto 8px\" }}>{t(\"loading.label\")}</span>\n                <ClipLoader loading={loading} css={override} size={17} />\n              </div>\n\n              <Button\n                id=\"updatebtn\"\n                className=\"btn btn-purple\"\n                onClick={updatePrice}\n              >\n                {t(\"confirm.label\")}\n              </Button>\n            </Col>\n          </Row>\n        </Modal.Body>\n      </Modal>\n\n      {/* CANCEL SALES */}\n      <Modal show={modalState === \"cancelSalesModal\"} onHide={handleClose}>\n        <Modal.Body className=\"nft_shadow text-center text-white\">\n          <Image src={cancelSalesTitle} style={{ width: \"45%\" }} />\n          <p className=\"cancel-confirm m-0\">\n            {`${t(\"cancelSalesConfirmation.label\")}${t(\"token.label\")}`}{\" \"}\n            {marketItem.tokenId} ?\n          </p>\n          <Row className=\"justify-content-center\">\n            <div className=\"col-6 col-md-auto\">\n              <div\n                id=\"loadingCancel\"\n                className=\"btn btn-purple\"\n                style={{ display: \"none\" }}\n              >\n                <span style={{ margin: \"auto 8px\" }}>{t(\"loading.label\")}</span>\n                <ClipLoader loading={loading} css={override} size={17} />\n              </div>\n\n              <Button\n                id=\"cancelbtn\"\n                className=\"btn btn-purple\"\n                onClick={cancelSales}\n              >\n                {t(\"yes.label\")}\n              </Button>\n            </div>\n            <div className=\"col-6 col-md-3\">\n              <Button className=\"btn btn-purple\" onClick={handleClose}>\n                {t(\"no.label\")}\n              </Button>\n            </div>\n          </Row>\n        </Modal.Body>\n      </Modal>\n    </div>\n  );\n};\nexport default NFTDetail;\n","import apiCaller from \"./axios.service\";\r\n\r\nconst createMarketplace = (data) => {\r\n  return apiCaller(\"/marketplace/createMarketplace\", {\r\n    data,\r\n  });\r\n};\r\n\r\nconst retrieveMarketplace = (rarity, level, sort) => {\r\n  return apiCaller(\"/marketplace/retrieveMarketplace\", {\r\n    rarity,\r\n    level,\r\n    sort,\r\n  });\r\n};\r\n\r\nexport default {\r\n  createMarketplace,\r\n  retrieveMarketplace,\r\n};\r\n","import React from \"react\";\nimport ScrollToTopBtn from \"./components/menu/ScrollToTop\";\nimport Header from \"./components/menu/header\";\nimport Swap from \"./components/views/swap\";\nimport Home from \"./components/views/faucet\";\nimport Shop from \"./components/views/shop\";\nimport MysteryBox from \"./components/views/mysteryBox\";\nimport Marketplace from \"./components/views/marketplace\";\nimport NFT from \"./components/views/nft\";\nimport NFTDetail from \"./components/views/nftDetail\";\nimport Cronjob from \"./components/views/cronjob\";\nimport { BrowserRouter, Routes, Route, Navigate } from \"react-router-dom\";\n\nimport { createGlobalStyle } from \"styled-components\";\n\nconst GlobalStyles = createGlobalStyle`\n  :root {\n    scroll-behavior: unset;\n  }\n`;\n\nexport const ScrollTop = ({ children, location }) => {\n  React.useEffect(() => window.scrollTo(0, 0), [location]);\n  return children;\n};\n\nconst app = () => (\n  <div className=\"wraper\">\n    <GlobalStyles />\n    <BrowserRouter>\n      <Header />\n      <Routes>\n        <Route path=\"/blockchain\" element={<Home />} />\n        <Route path=\"/blockchain/shop\" element={<Shop />} />\n        <Route path=\"*\" element={<Navigate to=\"/blockchain\" replace />} />\n      </Routes>\n      <ScrollToTopBtn />\n    </BrowserRouter>\n  </div>\n);\nexport default app;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import i18n from \"i18next\";\r\nimport Backend from \"i18next-xhr-backend\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { initReactI18next } from \"react-i18next\";\r\n\r\nexport const I18nLoader = ({ children }) => {\r\n  const [initialized, setInitialized] = useState(false);\r\n\r\n  const init = () =>\r\n    i18n\r\n      .use(Backend)\r\n      .use(initReactI18next)\r\n      .init({\r\n        lng: \"en\",\r\n        backend: {\r\n          /* translation file path */\r\n          loadPath: process.env.PUBLIC_URL + \"/assets/i18n/{{ns}}/{{lng}}.json\",\r\n        },\r\n        fallbackLng: \"en\",\r\n        debug: false,\r\n        /* can have multiple namespace, in case you want to divide a huge translation into smaller pieces and load them on demand */\r\n        ns: [\"translations\"],\r\n        defaultNS: \"translations\",\r\n        keySeparator: false,\r\n        interpolation: {\r\n          escapeValue: false,\r\n          formatSeparator: \",\",\r\n        },\r\n        react: {\r\n          wait: true,\r\n        },\r\n      });\r\n\r\n  useEffect(() => {\r\n    if (!i18n.isInitialized) {\r\n      init().then(() => setInitialized(true));\r\n    }\r\n  }, []);\r\n\r\n  if (initialized) return children;\r\n\r\n  return null;\r\n};\r\n\r\nexport default i18n;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./assets/animated.css\";\nimport \"../node_modules/font-awesome/css/font-awesome.min.css\";\nimport \"../node_modules/elegant-icons/style.css\";\nimport \"../node_modules/et-line/style.css\";\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\nimport \"../node_modules/bootstrap/dist/js/bootstrap.js\";\nimport \"./assets/style.scss\";\nimport LoadingScreen from \"react-loading-screen\";\n\n// import App from \"./components/app\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { I18nLoader } from \"./i18n\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <I18nLoader>\n    <Provider store={store}>\n      <LoadingScreen\n        loading={false}\n        bgColor=\"rgba(100, 100, 100, 0.5)\"\n        spinnerColor=\"#9ee5f8\"\n        textColor=\"#676767\"\n      >\n        <App />\n      </LoadingScreen>\n    </Provider>\n  </I18nLoader>,\n  document.getElementById(\"root\")\n);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}